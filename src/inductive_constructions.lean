import to_mathlib.data.set.prod
import to_mathlib.data.set.lattice
import to_mathlib.data.nat.basic
import to_mathlib.topology.constructions
import to_mathlib.topology.germ
import to_mathlib.topology.misc

import indexing
import notations
import interactive_expr

set_option trace.filter_inst_type true

open set filter prod topological_space function
open_locale topology unit_interval

/-!
Notes by Patrick:

The goal of this file is to explore how to prove `exists_surrounding_loops` (or rather its version
with `C = U = univ` which is the only needed case) in a way that uncouples the general
topological argument from the things specific to loops. The general lemma is meant to
be something like `inductive_construction'` below.
-/


section inductive_construction
/-!
Notes by Patrick:

In this section, I took lemmas that used to exist when I worked on the inductive construction
refactor. In particular there is the lemma which can't quite be used to prove
`inductive_htpy_construction`, namely `inductive_construction`.

In that lemma, the covering is fixed. Lemma `inductive_construction'` combines this with an argument
using local existence and exhaustions. A technical intermediate statement is
`inductive_construction''`.
-/

lemma index_type.tendsto_coe_at_top (N : ‚Ñï) : tendsto (coe : ‚Ñï ‚Üí index_type N) at_top at_top :=
tendsto_at_top_at_top.mpr
  (Œª i, ‚ü®indexing.to_nat i, Œª n hn,(indexing.from_to i) ‚ñ∏ indexing.coe_mono hn‚ü©)

def index_type.to_nat {N} (i : index_type N) : ‚Ñï := indexing.to_nat i

def index_type.succ : Œ† {N : ‚Ñï}, index_type N ‚Üí index_type N
| 0 i := nat.succ i
| (n + 1) i := @fin.last_cases n (Œª _, index_type $n+1) (fin.last n) (Œª k, k.succ) i




def index_type.is_last {N} (i : index_type N) : Prop := N > 0 ‚àß i = (N-1 : ‚Ñï)

-- useless?
lemma index_type.succ_eq {N} (i : index_type N) : i.succ = i ‚Üî i.is_last :=
begin
  sorry /- cases N,
  sorry { simp [index_type.succ, index_type.is_last] },
  { simp [index_type.succ, index_type.is_last],
    have : (N : index_type (N+1)) = fin.last N,
    sorry { change (Œª k, if h : k < N+1 then (‚ü®k, h‚ü© : fin (N+1)) else fin.last N) N = _,
      simp only [fin.last, lt_add_iff_pos_right, nat.lt_one_iff, dif_pos] },
    refine fin.last_cases _ _ i,
    sorry { simp only [this, fin.last_cases_last] },
    { intros i,
      -- We now secretely need to prove false ‚Üî false
      simp only [this, fin.last_cases_cast_succ],
      sorry } }, -/
end

lemma locally_finite.exists_forall_eventually_of_indexing
  {Œ± X Œπ : Type*} [topological_space X] [linear_order Œπ] [indexing Œπ] {f : ‚Ñï ‚Üí X ‚Üí Œ±}
  {V : Œπ ‚Üí set X} (hV : locally_finite V)
  (h : ‚àÄ n : ‚Ñï, ‚àÄ x ‚àâ V ((n + 1) : ‚Ñï), f (n + 1) x = f n x)
  (h' : ‚àÄ n : ‚Ñï, ((n+1 : ‚Ñï) : Œπ) = n ‚Üí f (n + 1) = f n) :
  ‚àÉ (F : X ‚Üí Œ±), ‚àÄ (x : X), ‚àÄ·∂† (n : ‚Ñï) in filter.at_top, f n =·∂†[ùìù x] F :=
begin
  let œÄ :  ‚Ñï ‚Üí Œπ := indexing.from_nat,
  choose U hUx hU using hV,
  choose i‚ÇÄ hi‚ÇÄ using Œª x, (hU x).bdd_above,
  let n‚ÇÄ : X ‚Üí ‚Ñï := indexing.to_nat ‚àò i‚ÇÄ,
  have key : ‚àÄ {x} {n}, n ‚â• n‚ÇÄ x ‚Üí ‚àÄ {y}, y ‚àà U x ‚Üí f n y = f (n‚ÇÄ x) y,
  { intros x n hn,
    rcases le_iff_exists_add.mp hn with ‚ü®k, rfl‚ü©, clear hn,
    intros y hy,
    induction k with k hk,
    { simp },
    { rw ‚Üê hk, clear hk,
      have : ‚àÄ n, œÄ n < œÄ (n+1) ‚à® œÄ n = œÄ (n+1),
      exact Œª n, lt_or_eq_of_le (indexing.mono_from n.le_succ),
      rcases this (n‚ÇÄ x + k) with H | H ; clear this,
      { have ineq : œÄ (n‚ÇÄ x + k + 1) > i‚ÇÄ x,
        { suffices : i‚ÇÄ x ‚â§ œÄ (n‚ÇÄ x + k), from lt_of_le_of_lt this H,
          rw ‚Üê indexing.from_to (i‚ÇÄ x),
          exact indexing.mono_from le_self_add },
        apply h,
        rintro (hy' : y ‚àà V (œÄ (n‚ÇÄ x + k + 1))),
        have := hi‚ÇÄ x ‚ü®y, ‚ü®hy', hy‚ü©‚ü©, clear hy hy',
        exact lt_irrefl _ (lt_of_le_of_lt this ineq) },
      { erw [‚Üê (h' _ H.symm)],
        refl } } },
  refine ‚ü®Œª x, f (n‚ÇÄ x) x, Œª x, _‚ü©,
  change ‚àÄ·∂† (n : ‚Ñï) in at_top, f n =·∂†[ùìù x] Œª (y : X), f (n‚ÇÄ y) y,
  apply (eventually_gt_at_top (n‚ÇÄ x)).mono (Œª n hn, _),
  apply mem_of_superset (hUx x) (Œª y hy, _),
  change f n y = f (n‚ÇÄ y) y,
  calc f n y = f (n‚ÇÄ x) y : key hn.le hy
  ... = f (max (n‚ÇÄ x) (n‚ÇÄ y)) y : (key (le_max_left _ _) hy).symm
  ... = f (n‚ÇÄ y) y : key (le_max_right _ _) (mem_of_mem_nhds $ hUx y)
end

lemma index_type.lt_succ  {N : ‚Ñï} (i : index_type N) (h : ¬¨ i.is_last ) : i < i.succ :=
sorry

lemma index_type.le_last {N : ‚Ñï} {i : index_type N} (h : i.is_last) (j) : j ‚â§ i :=
sorry

lemma index_type.le_of_lt_succ  {N : ‚Ñï} (i : index_type N) {j : index_type N} (h : i < j.succ) : i ‚â§ j :=
begin
  by_cases h : j.is_last,
  exact i.le_last h,
  sorry
end

@[simp] lemma index_type.not_is_last (n : index_type 0) : ¬¨ n.is_last :=
by simp [index_type.is_last]

@[elab_as_eliminator]
lemma index_type.induction_from {N : ‚Ñï} {P : index_type N ‚Üí Prop} {i‚ÇÄ : index_type N} (h‚ÇÄ : P i‚ÇÄ)
  (ih : ‚àÄ i ‚â• i‚ÇÄ, ¬¨ i.is_last ‚Üí P i ‚Üí P i.succ) : ‚àÄ i ‚â• i‚ÇÄ, P i :=
begin

  sorry
end

lemma locally_finite.exists_forall_eventually_of_index_type
  {Œ± X : Type*} [topological_space X] {N : ‚Ñï} {f : index_type N ‚Üí X ‚Üí Œ±}
  {V : index_type N ‚Üí set X} (hV : locally_finite V)
  (h : ‚àÄ n : index_type N, ¬¨ n.is_last ‚Üí ‚àÄ x ‚àâ V n.succ, f n.succ x = f n x) :
  ‚àÉ (F : X ‚Üí Œ±), ‚àÄ (x : X), ‚àÄ·∂† n in filter.at_top, f n =·∂†[ùìù x] F :=
begin
  choose U hUx hU using hV,
  choose i‚ÇÄ hi‚ÇÄ using Œª x, (hU x).bdd_above,
  have key : ‚àÄ {x} {n}, n ‚â• i‚ÇÄ x ‚Üí ‚àÄ {y}, y ‚àà U x ‚Üí f n y = f (i‚ÇÄ x) y,
  { intros x,
    apply @index_type.induction_from N (Œª i, ‚àÄ {y}, y ‚àà U x ‚Üí f i y = f (i‚ÇÄ x) y),
    exact Œª _ _, rfl,
    intros i hi h'i ih y hy,
    rw [h i h'i, ih hy],
    intros h'y,
    replace hi‚ÇÄ := mem_upper_bounds.mp (hi‚ÇÄ x) i.succ ‚ü®y, h'y, hy‚ü©,
    exact lt_irrefl _ (((i.lt_succ h'i).trans_le hi‚ÇÄ).trans_le hi) },
  refine ‚ü®Œª x, f (i‚ÇÄ x) x, Œª x, _‚ü©,
  change ‚àÄ·∂† n in at_top, f n =·∂†[ùìù x] Œª (y : X), f (i‚ÇÄ y) y,
  apply (eventually_ge_at_top (i‚ÇÄ x)).mono (Œª n hn, _),
  apply mem_of_superset (hUx x) (Œª y hy, _),
  change f n y = f (i‚ÇÄ y) y,
  calc f n y = f (i‚ÇÄ x) y : key hn hy
  ... = f (max (i‚ÇÄ x) (i‚ÇÄ y)) y : (key (le_max_left _ _) hy).symm
  ... = f (i‚ÇÄ y) y : key (le_max_right _ _) (mem_of_mem_nhds $ hUx y)
end

/-
/-- Predecessor function sending 0 to itself and nonzero elements where you think they should go. -/
def index_type.pred : Œ† {N : ‚Ñï}, index_type N ‚Üí index_type N
| 0 i := nat.pred i
| (n+1) i := if h : i = 0 then 0 else ‚ü®i.val.pred, (nat.pred_le _).trans_lt i.prop‚ü©

@[simp]
lemma index_type.succ_pred {N : ‚Ñï} (n : index_type N) : n.succ.pred = n :=
sorry
-/


-- We make `P` and `Q` explicit to help the elaborator when applying the lemma
-- (elab_as_eliminator isn't enough).
lemma index_type.exists_by_induction {N : ‚Ñï} {Œ± : Type*} (P : index_type N ‚Üí Œ± ‚Üí Prop)
  (Q : index_type N ‚Üí Œ± ‚Üí Œ± ‚Üí Prop)
  (h‚ÇÄ : ‚àÉ a, P 0 a)
  (ih : ‚àÄ n a, P n a ‚Üí ¬¨ n.is_last ‚Üí ‚àÉ a', P n.succ a' ‚àß Q n a a') :
  ‚àÉ f : index_type N ‚Üí Œ±, ‚àÄ n, P n (f n) ‚àß (¬¨ n.is_last ‚Üí Q n (f n) (f n.succ)) :=
begin
  revert P Q h‚ÇÄ ih,
  cases N,
  { intros P Q h‚ÇÄ ih,
    rcases exists_by_induction' P Q h‚ÇÄ _ with ‚ü®f, hf‚ü©,
    exact ‚ü®f, Œª n, ‚ü®(hf n).1, Œª _, (hf n).2‚ü©‚ü©,
    simpa using ih },
  { --dsimp only [index_type, index_type.succ],
    intros P Q h‚ÇÄ ih,
    choose f‚ÇÄ hf‚ÇÄ using h‚ÇÄ,
    choose! F hF hF' using ih,
    sorry }
end


lemma inductive_construction_alt {X Y : Type*} [topological_space X]
  {N : ‚Ñï} {U : index_type N ‚Üí set X}
  (P‚ÇÄ : Œ† x : X, germ (ùìù x) Y ‚Üí Prop) (P‚ÇÅ : Œ† i : index_type N, Œ† x : X, germ (ùìù x) Y ‚Üí Prop)
  (U_fin : locally_finite U)
  (init : ‚àÉ f : X ‚Üí Y, ‚àÄ x, P‚ÇÄ x f)
  (ind : ‚àÄ (i : index_type N) (f : X ‚Üí Y), (‚àÄ x, P‚ÇÄ x f) ‚Üí (‚àÄ j < i, ‚àÄ x, P‚ÇÅ j x f) ‚Üí
    ‚àÉ f' : X ‚Üí Y, (‚àÄ x, P‚ÇÄ x f') ‚àß (‚àÄ j ‚â§ i, ‚àÄ x, P‚ÇÅ j x f') ‚àß ‚àÄ x ‚àâ U i, f' x = f x) :
    ‚àÉ f : X ‚Üí Y, (‚àÄ x, P‚ÇÄ x f) ‚àß ‚àÄ j, ‚àÄ x, P‚ÇÅ j x f :=
begin
  let P : ‚Ñï ‚Üí (X ‚Üí Y) ‚Üí Prop :=
    Œª n f, (‚àÄ x, P‚ÇÄ x f) ‚àß ‚àÄ j : index_type N, j ‚â§ n ‚Üí ‚àÄ x, P‚ÇÅ j x f,
  let Q : ‚Ñï ‚Üí (X ‚Üí Y) ‚Üí (X ‚Üí Y) ‚Üí Prop :=
    Œª n f f', ((((n+1:‚Ñï) : index_type N) = n) ‚Üí f' = f) ‚àß ‚àÄ x ‚àâ U (n + 1 : ‚Ñï), f' x = f x,
  obtain ‚ü®f, hf‚ü© : ‚àÉ f : ‚Ñï ‚Üí X ‚Üí Y, ‚àÄ n, P n (f n) ‚àß Q n (f n) (f $ n + 1),
  { apply exists_by_induction',
    { dsimp [P],
      cases init with f‚ÇÄ hf‚ÇÄ,
      rcases ind 0 f‚ÇÄ hf‚ÇÄ _ with ‚ü®f', h‚ÇÄf', h‚ÇÅf', hf'‚ü©,
      use [f', h‚ÇÄf', h‚ÇÅf'],
      simp [index_type.not_lt_zero] },
    { rintros n f ‚ü®h‚ÇÄf, h‚ÇÅf‚ü©,
      rcases index_type.lt_or_eq_succ N n with hn | hn,
      { simp_rw index_type.le_or_lt_succ hn at h‚ÇÅf,
        rcases ind (n+1 : ‚Ñï) f h‚ÇÄf h‚ÇÅf with ‚ü®f', h‚ÇÄf', h‚ÇÅf', hf'‚ü©,
        exact ‚ü®f', ‚ü®h‚ÇÄf', h‚ÇÅf'‚ü©, ‚ü®Œª hn', (hn.ne hn'.symm).elim, hf'‚ü©‚ü© },
      { simp only [hn] at h‚ÇÅf,
        exact ‚ü®f, ‚ü®h‚ÇÄf, h‚ÇÅf‚ü©, Œª hn, rfl, Œª x hx, rfl‚ü© } } },
  dsimp only [P, Q] at hf,
  simp only [forall_and_distrib] at hf,
  rcases hf with ‚ü®‚ü®h‚ÇÄf, h‚ÇÅf‚ü©, hf, hf'‚ü©,
  rcases U_fin.exists_forall_eventually_of_indexing hf' hf with ‚ü®F, hF‚ü©,
  refine ‚ü®F, Œª x, _, Œª j, _‚ü©,
  { rcases (hF x).exists with ‚ü®n‚ÇÄ, hn‚ÇÄ‚ü©,
    simp only [germ.coe_eq.mpr hn‚ÇÄ.symm, h‚ÇÄf n‚ÇÄ x] },
  intros x,
  rcases ((hF x).and $ (filter.tendsto_at_top.mp (index_type.tendsto_coe_at_top N) j)).exists
    with ‚ü®n‚ÇÄ, hn‚ÇÄ, hn‚ÇÄ'‚ü©,
  exact eventually.germ_congr (h‚ÇÅf _ _ hn‚ÇÄ' x) hn‚ÇÄ.symm
end

local notation `ùìò` := index_type

lemma inductive_construction_again {X Y : Type*} [topological_space X]
  {N : ‚Ñï} {U : index_type N ‚Üí set X}
  (P‚ÇÄ : Œ† x : X, germ (ùìù x) Y ‚Üí Prop) (P‚ÇÅ : Œ† i : index_type N, Œ† x : X, germ (ùìù x) Y ‚Üí Prop)
  (P‚ÇÇ : index_type N ‚Üí (X ‚Üí Y) ‚Üí Prop)
  (U_fin : locally_finite U)
  (init : ‚àÉ f : X ‚Üí Y, (‚àÄ x, P‚ÇÄ x f) ‚àß P‚ÇÇ 0 f)
  (ind : ‚àÄ (i : index_type N) (f : X ‚Üí Y), (‚àÄ x, P‚ÇÄ x f) ‚Üí (P‚ÇÇ i f) ‚Üí (‚àÄ j < i, ‚àÄ x, P‚ÇÅ j x f) ‚Üí
    ‚àÉ f' : X ‚Üí Y, (‚àÄ x, P‚ÇÄ x f') ‚àß (¬¨ i.is_last ‚Üí P‚ÇÇ i.succ f') ‚àß (‚àÄ j ‚â§ i, ‚àÄ x, P‚ÇÅ j x f') ‚àß ‚àÄ x ‚àâ U i, f' x = f x) :
    ‚àÉ f : X ‚Üí Y, (‚àÄ x, P‚ÇÄ x f) ‚àß ‚àÄ j, ‚àÄ x, P‚ÇÅ j x f :=
begin
  let P : ùìò N ‚Üí (X ‚Üí Y) ‚Üí Prop :=
    Œª n f, (‚àÄ x, P‚ÇÄ x f) ‚àß (¬¨ n.is_last ‚Üí P‚ÇÇ n.succ f) ‚àß ‚àÄ j ‚â§ n, ‚àÄ x, P‚ÇÅ j x f,
  let Q : ùìò N ‚Üí (X ‚Üí Y) ‚Üí (X ‚Üí Y) ‚Üí Prop :=
    Œª n f f', ‚àÄ x ‚àâ U n.succ, f' x = f x,
  obtain ‚ü®f, hf‚ü© : ‚àÉ f : ùìò N ‚Üí X ‚Üí Y, ‚àÄ n, P n (f n) ‚àß (¬¨ n.is_last ‚Üí Q n (f n) (f n.succ)),
  { apply index_type.exists_by_induction,
    { rcases init with ‚ü®f‚ÇÄ, h‚ÇÄf‚ÇÄ, h‚ÇÅf‚ÇÄ‚ü©,
      rcases ind 0 f‚ÇÄ h‚ÇÄf‚ÇÄ h‚ÇÅf‚ÇÄ (by simp [index_type.not_lt_zero]) with ‚ü®f', h‚ÇÄf', h‚ÇÇf', h‚ÇÅf', hf'‚ü©,
      exact ‚ü®f', h‚ÇÄf', h‚ÇÇf', h‚ÇÅf'‚ü© },
    { rintros n f ‚ü®h‚ÇÄf, h‚ÇÇf, h‚ÇÅf‚ü© hn,
      by_cases hn : n.is_last,
      { simp only [P, Q, n.succ_eq.mpr hn],
        exact ‚ü®f, ‚ü®h‚ÇÄf, Œª hn', (hn' hn).elim, h‚ÇÅf‚ü©, Œª _ _, rfl‚ü© },
      rcases ind _ f h‚ÇÄf (h‚ÇÇf hn) (Œª j hj, h‚ÇÅf _ $ j.le_of_lt_succ hj) with ‚ü®f', h‚ÇÄf', h‚ÇÇf', h‚ÇÅf', hf'‚ü©,
      exact ‚ü®f', ‚ü®h‚ÇÄf', h‚ÇÇf', h‚ÇÅf'‚ü©, hf'‚ü©  } },
  dsimp only [P, Q] at hf,
  simp only [forall_and_distrib] at hf,
  rcases hf with ‚ü®‚ü®h‚ÇÄf, h‚ÇÇf, h‚ÇÅf‚ü©, hfU‚ü©,
  rcases U_fin.exists_forall_eventually_of_index_type hfU with ‚ü®F, hF‚ü©,
  refine ‚ü®F, Œª x, _, Œª j, _‚ü©,
  { rcases (hF x).exists with ‚ü®n‚ÇÄ, hn‚ÇÄ‚ü©,
    simp only [germ.coe_eq.mpr hn‚ÇÄ.symm, h‚ÇÄf n‚ÇÄ x] },
  intros x,
  rcases ((hF x).and $ eventually_ge_at_top j).exists with ‚ü®n‚ÇÄ, hn‚ÇÄ, hn‚ÇÄ'‚ü©,
  exact eventually.germ_congr (h‚ÇÅf _ _ hn‚ÇÄ' x) hn‚ÇÄ.symm
end


/- Below is my previous attempt that was not general enough. I keep it for now to
prove it follows from the above version. -/
lemma inductive_construction_alt' {X Y : Type*} [topological_space X]
  {N : ‚Ñï} {U K : index_type N ‚Üí set X}
  (P‚ÇÄ : Œ† x : X, germ (ùìù x) Y ‚Üí Prop) (P‚ÇÅ : Œ† i : index_type N, Œ† x : X, germ (ùìù x) Y ‚Üí Prop)
  (U_fin : locally_finite U)
  (init : ‚àÉ f : X ‚Üí Y, ‚àÄ x, P‚ÇÄ x f)
  (ind : ‚àÄ (i : index_type N) (f : X ‚Üí Y), (‚àÄ x, P‚ÇÄ x f) ‚Üí (‚àÄ j < i, ‚àÄ·∂† x near K j, P‚ÇÅ j x f) ‚Üí
    ‚àÉ f' : X ‚Üí Y, (‚àÄ x, P‚ÇÄ x f') ‚àß (‚àÄ j ‚â§ i, ‚àÄ·∂† x near K j, P‚ÇÅ j x f') ‚àß ‚àÄ x ‚àâ U i, f' x = f x) :
    ‚àÉ f : X ‚Üí Y, (‚àÄ x, P‚ÇÄ x f) ‚àß ‚àÄ j, ‚àÄ·∂† x near K j, P‚ÇÅ j x f :=
begin
  let P‚ÇÅ' : Œ† i : index_type N, Œ† x : X, germ (ùìù x) Y ‚Üí Prop :=
    Œª i, restrict_germ_predicate (P‚ÇÅ i) (K i),
  rcases inductive_construction_alt P‚ÇÄ P‚ÇÅ' U_fin init _ with ‚ü®f, h‚ÇÄf, h‚ÇÅf‚ü©,
  exact ‚ü®f, h‚ÇÄf, Œª j, forall_restrict_germ_predicate_iff.mp (h‚ÇÅf j)‚ü©,
  simp_rw forall_restrict_germ_predicate_iff,
  exact ind,
end

lemma inductive_construction {X Y : Type*} [topological_space X]
  {N : ‚Ñï} {U K : index_type N ‚Üí set X}
  (P‚ÇÄ P‚ÇÅ : Œ† x : X, germ (ùìù x) Y ‚Üí Prop)
  (U_fin : locally_finite U) (K_cover : (‚ãÉ i, K i) = univ)
  (init : ‚àÉ f : X ‚Üí Y, ‚àÄ x, P‚ÇÄ x f)
  (ind : ‚àÄ (i : index_type N) (f : X ‚Üí Y), (‚àÄ x, P‚ÇÄ x f) ‚Üí (‚àÄ·∂† x near ‚ãÉ j < i, K j, P‚ÇÅ x f) ‚Üí
    ‚àÉ f' : X ‚Üí Y, (‚àÄ x, P‚ÇÄ x f') ‚àß (‚àÄ·∂† x near ‚ãÉ j ‚â§ i, K j, P‚ÇÅ x f') ‚àß ‚àÄ x ‚àâ U i, f' x = f x) :
    ‚àÉ f : X ‚Üí Y, ‚àÄ x, P‚ÇÄ x f ‚àß P‚ÇÅ x f :=
begin
  rcases inductive_construction_alt P‚ÇÄ (Œª j, restrict_germ_predicate P‚ÇÅ (K j)) U_fin init
    (by simpa only [eventually_nhds_set_Union‚ÇÇ, forall_restrict_germ_predicate_iff] using ind) with
    ‚ü®f, h‚ÇÄf, h‚ÇÅf‚ü©,
  refine ‚ü®f, Œª x, ‚ü®h‚ÇÄf x, _‚ü©‚ü©,
  obtain ‚ü®j, hj‚ü© : ‚àÉ j, x ‚àà K j, by simpa using (by simp [K_cover] : x ‚àà ‚ãÉ j, K j),
  exact (forall_restrict_germ_predicate_iff.mp (h‚ÇÅf j)).on_set x hj,
end

/-- We are given a suitably nice topological space `X` and three local constraints `P‚ÇÄ`,`P‚ÇÄ'` and
`P‚ÇÅ` on maps from `X` to some type `Y`. All maps entering the discussion are required to statisfy
`P‚ÇÄ` everywhere. The goal is to turn a map `f‚ÇÄ` satisfying `P‚ÇÅ` near a compact set `K` into
one satisfying everywhere without changing `f‚ÇÄ` near `K`. The assumptions are:
* For every `x` in `X` there is a map which satisfies `P‚ÇÅ` near `x`
* One can patch two maps `f‚ÇÅ f‚ÇÇ` satisfying `P‚ÇÅ` on open sets `U‚ÇÅ` and `U‚ÇÇ` respectively
  and such that `f‚ÇÅ` satisfies `P‚ÇÄ'` everywhere into a map satisfying `P‚ÇÅ` on `K‚ÇÅ ‚à™ K‚ÇÇ` for any
  compact sets `K·µ¢ ‚äÜ U·µ¢` and `P‚ÇÄ'` everywhere. -/
lemma inductive_construction'' {X Y : Type*} [emetric_space X] [locally_compact_space X]
  [second_countable_topology X]
  (P‚ÇÄ P‚ÇÄ' P‚ÇÅ : Œ† x : X, germ (ùìù x) Y ‚Üí Prop)
  {f‚ÇÄ : X ‚Üí Y} (hP‚ÇÄf‚ÇÄ : ‚àÄ x, P‚ÇÄ x f‚ÇÄ ‚àß P‚ÇÄ' x f‚ÇÄ )
  (loc : ‚àÄ x, ‚àÉ f : X ‚Üí Y, (‚àÄ x, P‚ÇÄ x f) ‚àß ‚àÄ·∂† x' in ùìù x, P‚ÇÅ x' f)
  (ind : ‚àÄ {U‚ÇÅ U‚ÇÇ K‚ÇÅ K‚ÇÇ : set X} {f‚ÇÅ f‚ÇÇ : X ‚Üí Y}, is_open U‚ÇÅ ‚Üí is_open U‚ÇÇ ‚Üí
     is_closed K‚ÇÅ ‚Üí is_closed K‚ÇÇ ‚Üí K‚ÇÅ ‚äÜ U‚ÇÅ ‚Üí K‚ÇÇ ‚äÜ U‚ÇÇ ‚Üí (‚àÄ x, P‚ÇÄ x f‚ÇÅ ‚àß P‚ÇÄ' x f‚ÇÅ) ‚Üí (‚àÄ x, P‚ÇÄ x f‚ÇÇ) ‚Üí
     (‚àÄ x ‚àà U‚ÇÅ, P‚ÇÅ x f‚ÇÅ) ‚Üí (‚àÄ x ‚àà U‚ÇÇ, P‚ÇÅ x f‚ÇÇ) ‚Üí
     ‚àÉ f : X ‚Üí Y, (‚àÄ x, P‚ÇÄ x f ‚àß P‚ÇÄ' x f ) ‚àß (‚àÄ·∂† x near K‚ÇÅ ‚à™ K‚ÇÇ, P‚ÇÅ x f) ‚àß
                  (‚àÄ·∂† x near K‚ÇÅ ‚à™ U‚ÇÇ·∂ú, f x = f‚ÇÅ x)) :
    ‚àÉ f : X ‚Üí Y, ‚àÄ x, P‚ÇÄ x f ‚àß P‚ÇÄ' x f ‚àß P‚ÇÅ x f :=
begin
  let P : set X ‚Üí Prop := Œª U, ‚àÉ f : X ‚Üí Y, (‚àÄ x, P‚ÇÄ x f) ‚àß (‚àÄ x ‚àà U, P‚ÇÅ x f),
  have hP‚ÇÅ : antitone P,
  { rintros U V hUV ‚ü®f, h, h'‚ü©,
    exact ‚ü®f, h, Œª x hx, h' x (hUV hx)‚ü© },
  have hP‚ÇÇ : P ‚àÖ, from ‚ü®f‚ÇÄ, Œª x, (hP‚ÇÄf‚ÇÄ x).1, Œª x h, h.elim‚ü©,
  have hP‚ÇÉ : ‚àÄ (x : X), x ‚àà univ ‚Üí (‚àÉ (V : set X) (H : V ‚àà ùìù x), P V),
  { rintros x -,
    rcases loc x with ‚ü®f, h‚ÇÄf, h‚ÇÅf‚ü©,
    exact ‚ü®_, h‚ÇÅf, f, h‚ÇÄf, Œª x, id‚ü© },
  rcases exists_locally_finite_subcover_of_locally is_closed_univ hP‚ÇÅ hP‚ÇÇ hP‚ÇÉ with
    ‚ü®K, (U : index_type 0 ‚Üíset X) , K_cpct, U_op, hU, hKU, U_loc, hK‚ü©,
  simp_rw ‚Üê and_assoc,
  apply inductive_construction (Œª x œÜ, P‚ÇÄ x œÜ ‚àß P‚ÇÄ' x œÜ) P‚ÇÅ U_loc (eq_univ_of_univ_subset hK)
    ‚ü®f‚ÇÄ, hP‚ÇÄf‚ÇÄ‚ü©,
  rintros (n : ‚Ñï) f h‚ÇÄf (h‚ÇÅf : ‚àÄ·∂† x near ‚ãÉ j < n, K j, P‚ÇÅ x f),
  have cpct : is_closed ‚ãÉ j < n, K j,
  { rw show (‚ãÉ j < n, K j) = ‚ãÉ j ‚àà finset.range n, K j, by simp only [finset.mem_range],
    apply (finset.range n).is_closed_bUnion _ (Œª j _, (K_cpct j).is_closed) },
  rcases hU n with ‚ü®f', h‚ÇÄf', h‚ÇÅf'‚ü©,
  rcases mem_nhds_set_iff_exists.mp h‚ÇÅf with ‚ü®V, V_op, hKV, h‚ÇÅV‚ü©,
  rcases ind V_op (U_op n) cpct (K_cpct n).is_closed
    hKV (hKU n) h‚ÇÄf h‚ÇÄf' h‚ÇÅV h‚ÇÅf' with ‚ü®F, h‚ÇÄF, h‚ÇÅF, hF‚ü©,
  simp_rw ‚Üê bUnion_le at h‚ÇÅF,
  exact ‚ü®F, h‚ÇÄF, h‚ÇÅF, Œª x hx, hF.on_set x (or.inr hx)‚ü©
end

/-- We are given a suitably nice topological space `X` and two local constraints `P‚ÇÄ` and `P‚ÇÅ`
on maps from `X` to some type `Y`. All maps entering the discussion are required to statisfy `P‚ÇÄ`
everywhere. The goal is to turn a map `f‚ÇÄ` satisfying `P‚ÇÅ` near a compact set `K` into
one satisfying everywhere without changing `f‚ÇÄ` near `K`. The assumptions are:
* For every `x` in `X` there is a map which satisfies `P‚ÇÅ` near `x`
* One can patch two maps `f‚ÇÅ f‚ÇÇ` satisfying `P‚ÇÅ` on open sets `U‚ÇÅ` and `U‚ÇÇ` respectively
  into a map satisfying `P‚ÇÅ` on `K‚ÇÅ ‚à™ K‚ÇÇ` for any compact sets `K·µ¢ ‚äÜ U·µ¢`.
This is deduced this version from the version where `K` is empty but adding some `P'‚ÇÄ`, see
`inductive_construction''`. -/
lemma inductive_construction' {X Y : Type*} [emetric_space X] [locally_compact_space X]
  [second_countable_topology X]
  (P‚ÇÄ P‚ÇÅ : Œ† x : X, germ (ùìù x) Y ‚Üí Prop)
  {K : set X} (hK : is_closed K)
  {f‚ÇÄ : X ‚Üí Y} (hP‚ÇÄf‚ÇÄ : ‚àÄ x, P‚ÇÄ x f‚ÇÄ) (hP‚ÇÅf‚ÇÄ : ‚àÄ·∂† x near K, P‚ÇÅ x f‚ÇÄ)
  (loc : ‚àÄ x, ‚àÉ f : X ‚Üí Y, (‚àÄ x, P‚ÇÄ x f) ‚àß ‚àÄ·∂† x' in ùìù x, P‚ÇÅ x' f)
  (ind : ‚àÄ {U‚ÇÅ U‚ÇÇ K‚ÇÅ K‚ÇÇ : set X} {f‚ÇÅ f‚ÇÇ : X ‚Üí Y}, is_open U‚ÇÅ ‚Üí is_open U‚ÇÇ ‚Üí
     is_closed K‚ÇÅ ‚Üí is_closed K‚ÇÇ ‚Üí K‚ÇÅ ‚äÜ U‚ÇÅ ‚Üí K‚ÇÇ ‚äÜ U‚ÇÇ ‚Üí (‚àÄ x, P‚ÇÄ x f‚ÇÅ) ‚Üí (‚àÄ x, P‚ÇÄ x f‚ÇÇ) ‚Üí
     (‚àÄ x ‚àà U‚ÇÅ, P‚ÇÅ x f‚ÇÅ) ‚Üí (‚àÄ x ‚àà U‚ÇÇ, P‚ÇÅ x f‚ÇÇ) ‚Üí
     ‚àÉ f : X ‚Üí Y, (‚àÄ x, P‚ÇÄ x f) ‚àß (‚àÄ·∂† x near K‚ÇÅ ‚à™ K‚ÇÇ, P‚ÇÅ x f) ‚àß (‚àÄ·∂† x near K‚ÇÅ ‚à™ U‚ÇÇ·∂ú, f x = f‚ÇÅ x)) :
    ‚àÉ f : X ‚Üí Y, (‚àÄ x, P‚ÇÄ x f ‚àß P‚ÇÅ x f) ‚àß ‚àÄ·∂† x near K, f x = f‚ÇÄ x :=
begin
  let P‚ÇÄ' : Œ† x : X, germ (ùìù x) Y ‚Üí Prop := restrict_germ_predicate (Œª x œÜ, œÜ.value = f‚ÇÄ x) K,
  have hf‚ÇÄ : ‚àÄ x, P‚ÇÄ x f‚ÇÄ ‚àß P‚ÇÄ' x f‚ÇÄ,
  { exact Œª x, ‚ü®hP‚ÇÄf‚ÇÄ x, Œª hx, eventually_of_forall (Œª x', rfl)‚ü© },
  have ind' : ‚àÄ (U‚ÇÅ U‚ÇÇ K‚ÇÅ K‚ÇÇ : set X) {f‚ÇÅ f‚ÇÇ : X ‚Üí Y}, is_open U‚ÇÅ ‚Üí is_open U‚ÇÇ ‚Üí
     is_closed K‚ÇÅ ‚Üí is_closed K‚ÇÇ ‚Üí K‚ÇÅ ‚äÜ U‚ÇÅ ‚Üí K‚ÇÇ ‚äÜ U‚ÇÇ ‚Üí (‚àÄ x, P‚ÇÄ x f‚ÇÅ ‚àß P‚ÇÄ' x f‚ÇÅ) ‚Üí (‚àÄ x, P‚ÇÄ x f‚ÇÇ) ‚Üí
     (‚àÄ x ‚àà U‚ÇÅ, P‚ÇÅ x f‚ÇÅ) ‚Üí (‚àÄ x ‚àà U‚ÇÇ, P‚ÇÅ x f‚ÇÇ) ‚Üí
     ‚àÉ f : X ‚Üí Y, (‚àÄ x, P‚ÇÄ x f ‚àß P‚ÇÄ' x f ) ‚àß (‚àÄ·∂† x near K‚ÇÅ ‚à™ K‚ÇÇ, P‚ÇÅ x f) ‚àß
                  (‚àÄ·∂† x near K‚ÇÅ ‚à™ U‚ÇÇ·∂ú, f x = f‚ÇÅ x),
  { intros U‚ÇÅ U‚ÇÇ K‚ÇÅ K‚ÇÇ f‚ÇÅ f‚ÇÇ U‚ÇÅ_op U‚ÇÇ_op K‚ÇÅ_cpct K‚ÇÇ_cpct hK‚ÇÅU‚ÇÅ hK‚ÇÇU‚ÇÇ hf‚ÇÅ hf‚ÇÇ hf‚ÇÅU‚ÇÅ hf‚ÇÇU‚ÇÇ,
    obtain ‚ü®h‚ÇÄf‚ÇÅ, h‚ÇÄ'f‚ÇÅ‚ü© := forall_and_distrib.mp hf‚ÇÅ,
    rw forall_restrict_germ_predicate_iff at h‚ÇÄ'f‚ÇÅ,
    rcases (has_basis_nhds_set K).mem_iff.mp (hP‚ÇÅf‚ÇÄ.germ_congr_set h‚ÇÄ'f‚ÇÅ) with ‚ü®U, ‚ü®U_op, hKU‚ü©, hU‚ü©,
    rcases ind (U_op.union U‚ÇÅ_op) U‚ÇÇ_op (hK.union K‚ÇÅ_cpct) K‚ÇÇ_cpct (union_subset_union hKU hK‚ÇÅU‚ÇÅ)
      hK‚ÇÇU‚ÇÇ h‚ÇÄf‚ÇÅ hf‚ÇÇ (Œª x hx, hx.elim (Œª hx, hU hx) (Œª hx, hf‚ÇÅU‚ÇÅ x hx)) hf‚ÇÇU‚ÇÇ with ‚ü®f, h‚ÇÄf, hf, h'f‚ü©,
    rw [union_assoc, eventually_nhds_set_union] at hf h'f,
    exact ‚ü®f, Œª x, ‚ü®h‚ÇÄf x, restrict_germ_predicate_congr (hf‚ÇÅ x).2 h'f.1‚ü©, hf.2, h'f.2‚ü© },
  rcases inductive_construction'' P‚ÇÄ P‚ÇÄ' P‚ÇÅ hf‚ÇÄ loc ind' with ‚ü®f, hf‚ü©,
  simp only [forall_and_distrib, forall_restrict_germ_predicate_iff ] at hf ‚ä¢,
  exact ‚ü®f, ‚ü®hf.1, hf.2.2‚ü©, hf.2.1‚ü©
end

end inductive_construction

section htpy

private noncomputable def T : ‚Ñï ‚Üí ‚Ñù := Œª n, nat.rec 0 (Œª k x, x + 1/(2 : ‚Ñù)^(k+1)) n

open_locale big_operators

-- Note this is more painful than Patrick hoped for. Maybe this should be the definition of T.
private lemma T_eq (n : ‚Ñï) : T n = 1- (1/(2: ‚Ñù))^n :=
begin
  have : T n = ‚àë k in finset.range n, 1/(2: ‚Ñù)^(k+1),
  { induction n with n hn,
    { simp only [T, finset.range_zero, finset.sum_empty] },
    change T n + _ = _,
    rw [hn, finset.sum_range_succ] },
  simp_rw [this, ‚Üê one_div_pow, pow_succ, ‚Üê finset.mul_sum, geom_sum_eq (by norm_num : 1/(2:‚Ñù) ‚â† 1) n],
  field_simp,
  norm_num,
  apply div_eq_of_eq_mul,
  apply neg_ne_zero.mpr,
  apply ne_of_gt,
  positivity,
  ring
end

private lemma T_lt (n : ‚Ñï) : T n < 1 :=
begin
  rw T_eq,
  have : (0 : ‚Ñù) < (1 / 2) ^ n, by positivity,
  linarith
end

private lemma T_lt_succ (n : ‚Ñï) : T n < T (n+1) :=
lt_add_of_le_of_pos le_rfl (one_div_pos.mpr (pow_pos zero_lt_two _))

private lemma T_le_succ (n : ‚Ñï) : T n ‚â§ T (n+1) := (T_lt_succ n).le

private lemma T_succ_sub (n : ‚Ñï) : T (n+1) - T n = 1/2^(n+1) :=
begin
  change T n + _ - T n = _,
  simp
end

private lemma mul_T_succ_sub (n : ‚Ñï) : 2^(n+1)*(T (n+1) - T n) = 1 :=
begin
  rw T_succ_sub,
  field_simp
end

private lemma T_one : T 1 = 1/2 :=
by simp [T]

private lemma T_nonneg (n : ‚Ñï) : 0 ‚â§ T n :=
begin
  rw [T_eq],
  have : (1 / (2 : ‚Ñù))^n ‚â§ 1,
  apply pow_le_one ; norm_num,
  linarith,
end


private lemma not_T_succ_le (n : ‚Ñï) : ¬¨ T (n + 1) ‚â§ 0 :=
begin
  rw [T_eq, not_le],
  have : (1 / (2 : ‚Ñù)) ^ (n + 1) < 1,
  apply pow_lt_one ; norm_num,
  linarith,
end

lemma index_type.to_nat_succ {N : ‚Ñï} (i : index_type N) :
  (i.succ.to_nat = i.to_nat + 1) ‚à® (i.is_last ‚àß i.succ.to_nat = i.to_nat) :=
begin

  sorry
end

/-
lemma inductive_construction_again {X Y : Type*} [topological_space X]
  {N : ‚Ñï} {U : index_type N ‚Üí set X}
  (P‚ÇÄ : Œ† x : X, germ (ùìù x) Y ‚Üí Prop) (P‚ÇÅ : Œ† i : index_type N, Œ† x : X, germ (ùìù x) Y ‚Üí Prop)
  (P‚ÇÇ : index_type N ‚Üí (X ‚Üí Y) ‚Üí Prop)
  (U_fin : locally_finite U)
  (init : ‚àÉ f : X ‚Üí Y, (‚àÄ x, P‚ÇÄ x f) ‚àß P‚ÇÇ 0 f)
  (ind : ‚àÄ (i : index_type N) (f : X ‚Üí Y), (‚àÄ x, P‚ÇÄ x f) ‚Üí (P‚ÇÇ i f) ‚Üí (‚àÄ j < i, ‚àÄ x, P‚ÇÅ j x f) ‚Üí
    ‚àÉ f' : X ‚Üí Y, (‚àÄ x, P‚ÇÄ x f') ‚àß P‚ÇÇ i.succ f' ‚àß (‚àÄ j ‚â§ i, ‚àÄ x, P‚ÇÅ j x f') ‚àß ‚àÄ x ‚àâ U i, f' x = f x) :
    ‚àÉ f : X ‚Üí Y, (‚àÄ x, P‚ÇÄ x f) ‚àß ‚àÄ j, ‚àÄ x, P‚ÇÅ j x f :=
-/

lemma inductive_htpy_construction {X Y : Type*} [topological_space X]
  {N : ‚Ñï} {U K : index_type N ‚Üí set X}
  (P‚ÇÄ P‚ÇÅ : Œ† x : X, germ (ùìù x) Y ‚Üí Prop) (P‚ÇÇ : Œ† p : ‚Ñù √ó X, germ (ùìù p) Y ‚Üí Prop)
  (hP‚ÇÇ : ‚àÄ a b (p : ‚Ñù √ó X) (f : ‚Ñù √ó X ‚Üí Y), P‚ÇÇ (a*p.1+b, p.2) f ‚Üí P‚ÇÇ p (Œª p : ‚Ñù √ó X, f (a*p.1+b, p.2)))
  (U_fin : locally_finite U) (K_cover : (‚ãÉ i, K i) = univ)
  {f‚ÇÄ : X ‚Üí Y} (init : ‚àÄ x, P‚ÇÄ x f‚ÇÄ)
  (init' : ‚àÄ p, P‚ÇÇ p (Œª p : ‚Ñù √ó X, f‚ÇÄ p.2)) -- Not in the original version
  (ind : ‚àÄ (i : index_type N) (f : X ‚Üí Y), (‚àÄ x, P‚ÇÄ x f) ‚Üí (‚àÄ·∂† x near ‚ãÉ j < i, K j, P‚ÇÅ x f) ‚Üí
    ‚àÉ F : ‚Ñù ‚Üí X ‚Üí Y, (‚àÄ t, ‚àÄ x, P‚ÇÄ x $ F t) ‚àß (‚àÄ·∂† x near ‚ãÉ j ‚â§ i, K j, P‚ÇÅ x $ F 1) ‚àß
                     (‚àÄ p, P‚ÇÇ p ‚ÜøF) ‚àß (‚àÄ t, ‚àÄ x ‚àâ U i, F t x = f x) ‚àß
                     (‚àÄ·∂† t near Iic 0, F t = f) ‚àß (‚àÄ·∂† t near Ici 1, F t = F 1)) :
  ‚àÉ F : ‚Ñù ‚Üí X ‚Üí Y, F 0 = f‚ÇÄ ‚àß (‚àÄ t x, P‚ÇÄ x (F t)) ‚àß (‚àÄ x, P‚ÇÅ x (F 1)) ‚àß (‚àÄ p, P‚ÇÇ p ‚ÜøF) :=
begin
  let PP‚ÇÄ : Œ† p : ‚Ñù √ó X, germ (ùìù p) Y ‚Üí Prop := Œª p œÜ, P‚ÇÄ p.2 œÜ.slice_right ‚àß
    (p.1 = 0 ‚Üí œÜ.value = f‚ÇÄ p.2) ‚àß P‚ÇÇ p œÜ,
  let PP‚ÇÅ : Œ† i : index_type N, Œ† p : ‚Ñù √ó X, germ (ùìù p) Y ‚Üí Prop := Œª i p œÜ,
    p.1 = 1 ‚Üí restrict_germ_predicate P‚ÇÅ (K i) p.2 œÜ.slice_right,
  let PP‚ÇÇ : index_type N ‚Üí (‚Ñù √ó X ‚Üí Y) ‚Üí Prop :=
    Œª i f, ‚àÄ x, ‚àÄ t ‚â• T i.to_nat, f (t, x) = f (T i.to_nat, x),
  set K' : index_type N ‚Üí set (‚Ñù √ó X) := Œª i, Ici (T i.to_nat) √óÀ¢ K i,
  set U' : index_type N ‚Üí set (‚Ñù √ó X) := Œª i, Ici (T i.to_nat) √óÀ¢ U i,
  have hPP‚ÇÄ : ‚àÄ (p : ‚Ñù √ó X), PP‚ÇÄ p (Œª (p : ‚Ñù √ó X), f‚ÇÄ p.2),
  sorry { rintros ‚ü®t, x‚ü©,
    exact ‚ü®init x, Œª h, rfl, init' _‚ü© },
  have ind' : ‚àÄ i (f : ‚Ñù √ó X ‚Üí Y), (‚àÄ p, PP‚ÇÄ p f) ‚Üí PP‚ÇÇ i f ‚Üí (‚àÄ j < i, ‚àÄ p, PP‚ÇÅ j p f) ‚Üí
    ‚àÉ f' : ‚Ñù √ó X ‚Üí Y, (‚àÄ p, PP‚ÇÄ p f') ‚àß PP‚ÇÇ i.succ f' ‚àß (‚àÄ j ‚â§ i, ‚àÄ p, PP‚ÇÅ j p f') ‚àß
                      ‚àÄ p ‚àâ Ici (T i.to_nat) √óÀ¢ U i, f' p = f p,
  { rintros i F h‚ÇÄF h‚ÇÇF h‚ÇÅF,
    replace h‚ÇÅF : ‚àÄ·∂† (x : X) near ‚ãÉ j < i, K j, P‚ÇÅ x ‚Üë(Œª x, F (T i.to_nat, x)),
    sorry { rw eventually_nhds_set_Union‚ÇÇ,
      intros j hj,
      have : ‚àÄ x : X, restrict_germ_predicate P‚ÇÅ (K j) x (Œª x', F (1, x')),
        from Œª x, h‚ÇÅF j hj (1, x) rfl,
      apply (forall_restrict_germ_predicate_iff.mp this).germ_congr_set,
      apply eventually_of_forall (Œª x, (_ : F (T i.to_nat, x) = F (1, x))),
      rw h‚ÇÇF _ _ (T_lt _).le },
    rcases ind i (Œª x, F (T i.to_nat, x)) (Œª x, (h‚ÇÄF (_, x)).1) h‚ÇÅF with
      ‚ü®F', h‚ÇÄF', h‚ÇÅF', h‚ÇÇF', hUF', hpast_F', hfutur_F'‚ü© ; clear ind,
    let F'' : ‚Ñù √ó X ‚Üí Y :=  Œª p : ‚Ñù √ó X,
        if p.1 ‚â§ T i.to_nat then F p else F' (2^(i.to_nat+1)*(p.1 - T i.to_nat)) p.2,
    have loc‚ÇÅ : ‚àÄ p : ‚Ñù √ó X, p.1 ‚â§ T i.to_nat ‚Üí (F'' : germ (ùìù p) Y)  = F,
    {
      sorry },
    have loc‚ÇÇ : ‚àÄ p : ‚Ñù √ó X, p.1 > T i.to_nat ‚Üí
      (F'' : germ (ùìù p) Y)  = Œª p : ‚Ñù √ó X, F' (2^(i.to_nat+1)*(p.1 - T i.to_nat)) p.2,
    {
      sorry },
    have loc‚ÇÇ' : ‚àÄ (t : ‚Ñù) (x : X), t > T i.to_nat ‚Üí
      (‚ÜëŒª x' : X,  F'' (t, x') : germ (ùìù x) Y) = ‚ÜëŒª x' : X, F' (2^(i.to_nat+1)*(t - T i.to_nat)) x,
    {
      sorry },
    dsimp only [PP‚ÇÄ, PP‚ÇÅ, PP‚ÇÇ],
    refine ‚ü®F'', _, _, _,_ ‚ü©,
    sorry { rintros p,
      by_cases ht : p.1 ‚â§ T i.to_nat,
      { rw loc‚ÇÅ _ ht,
        apply h‚ÇÄF },
      { push_neg at ht,
        cases p with t x,
        rw loc‚ÇÇ _ ht,
        refine ‚ü®h‚ÇÄF' (2 ^ (i.to_nat + 1) * (t - T i.to_nat)) x, _, _‚ü©,
        { rintro (rfl : t = 0),
          exact (lt_irrefl _ ((T_nonneg i.to_nat).trans_lt ht)).elim },
        { simpa only [mul_sub, neg_mul] using hP‚ÇÇ (2^(i.to_nat+1)) (-2^(i.to_nat+1)*T i.to_nat)
              (t, x) ‚ÜøF' (h‚ÇÇF' _) } } },
    { intros x t ht,
      rw ge_iff_le at ht,
    /-

      /- rcases eq_or_lt_of_le ht with rfl|ht',
      refl,
      clear ht,
       -/rcases i.to_nat_succ with hi|‚ü®hi, hi'‚ü©,
      sorry { rw hi at *,
        have h‚ÇÇt : ¬¨ t ‚â§ T i.to_nat,
        { push_neg,
          exact (T_lt_succ i.to_nat).trans_le ht },
          dsimp only [F''],
          rw [if_neg h‚ÇÇt, if_neg],
          { rw [hfutur_F'.on_set, mul_T_succ_sub],
            conv { rw mem_Ici, congr, rw ‚Üê mul_T_succ_sub i.to_nat },
            exact mul_le_mul_of_nonneg_left (sub_le_sub_right ht _) (pow_nonneg zero_le_two _) },
          { push_neg,
            apply T_lt_succ } },
        { rw hi' at *,
          dsimp only [F''],
          rcases eq_or_lt_of_le ht with rfl|ht',
          rw [if_pos le_rfl, h‚ÇÇF _ _ ht],
          rw [if_neg (not_le_of_gt ht'), if_pos le_rfl],
          rw h‚ÇÇF, -/

          sorry },
    sorry { rintros j hj ‚ü®t, x‚ü© (rfl : t = 1),
      replace h‚ÇÅF' := eventually_nhds_set_Union‚ÇÇ.mp h‚ÇÅF' j hj,
      rw loc‚ÇÇ (1, x) (T_lt i.to_nat),
      revert x,
      change ‚àÄ x : X, restrict_germ_predicate P‚ÇÅ (K j) x (Œª x' : X, F' (2 ^ (i.to_nat + 1) * (1 - T i.to_nat)) x'),
      rw forall_restrict_germ_predicate_iff,
      apply h‚ÇÅF'.germ_congr_set,
      apply eventually_of_forall _,
      apply congr_fun (hfutur_F'.on_set _ _),
      conv { congr, skip, rw ‚Üê mul_T_succ_sub i.to_nat },
      exact mul_le_mul_of_nonneg_left (sub_le_sub_right (T_lt _).le _) (pow_nonneg zero_le_two _) },
    sorry { rintros ‚ü®t, x‚ü© htx,
      simp only [prod_mk_mem_set_prod_eq, mem_Ici, not_and_distrib, not_le] at htx,
      cases htx with ht hx,
      { change (‚ÜëF'' : germ (ùìù (t, x)) Y).value = (‚ÜëF : germ (ùìù (t, x)) Y).value,
        rw loc‚ÇÅ (t, x) ht.le },
      { dsimp only [F''],
        split_ifs with ht ht,
        { refl },
        { rw hUF' _ x hx,
          push_neg at ht,
          rw h‚ÇÇF x _ ht.le } } } },
  sorry /- rcases inductive_construction_again PP‚ÇÄ PP‚ÇÅ PP‚ÇÇ (U_fin.prod_left $ Œª i, Ici (T $ indexing.to_nat i))
    ‚ü®Œª p, f‚ÇÄ p.2, hPP‚ÇÄ, Œª x t ht, rfl‚ü© ind' with ‚ü®F, hF,h'F ‚ü©, clear ind ind' hPP‚ÇÄ,
  refine ‚ü®curry F, _, _, _, _‚ü©,
  { exact funext (Œª x, (hF (0, x)).2.1 rfl) },
  { exact Œª t x, (hF (t, x)).1 },
  { intros x,
    obtain ‚ü®j, hj‚ü© : ‚àÉ j, x ‚àà K j, by simpa using (by simp [K_cover] : x ‚àà ‚ãÉ j, K j),
    exact (h'F j (1, x) rfl hj).self_of_nhds },
  { intros p,
    convert (hF p).2.2 using 2,
    exact uncurry_curry F }, -/
end
end htpy
