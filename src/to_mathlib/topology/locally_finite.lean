import topology.locally_finite

open function set

lemma locally_finite.smul_left {Œπ : Type*} {Œ± : Type*} [topological_space Œ±] {M : Type*}
  {R : Type*} [semiring R] [add_comm_monoid M] [module R M] [no_zero_smul_divisors R M]
  {s : Œπ ‚Üí Œ± ‚Üí R} (h : locally_finite $ Œª i, support $ s i) (f : Œπ ‚Üí Œ± ‚Üí M) :
  locally_finite (Œª i, support $ s i ‚Ä¢ f i) :=
begin
  apply h.subset (Œª i, _),
  rw support_smul,
  exact inter_subset_left _ _
end

lemma locally_finite.smul_right {Œπ : Type*} {Œ± : Type*} [topological_space Œ±] {M : Type*}
  {R : Type*} [semiring R] [add_comm_monoid M] [module R M] [no_zero_smul_divisors R M]
   {f : Œπ ‚Üí Œ± ‚Üí M} (h : locally_finite $ Œª i, support $ f i) (s : Œπ ‚Üí Œ± ‚Üí R) :
  locally_finite (Œª i, support $ s i ‚Ä¢ f i) :=
begin
  apply h.subset (Œª i, _),
  rw support_smul,
  exact inter_subset_right _ _
end

section
variables {Œπ X : Type*} [topological_space X]

@[to_additive]
lemma locally_finite.exists_finset_mul_support_eq {M : Type*} [comm_monoid M] {œÅ : Œπ ‚Üí X ‚Üí M}
  (hœÅ : locally_finite (Œª i, mul_support $ œÅ i)) (x‚ÇÄ : X) :
  ‚àÉ I : finset Œπ, mul_support (Œª i, œÅ i x‚ÇÄ) = I :=
begin
  use (hœÅ.point_finite x‚ÇÄ).to_finset,
  rw [finite.coe_to_finset],
  refl
end

end

open_locale topological_space
open filter

lemma locally_finite.eventually_subset {Œπ X : Type*} [topological_space X] {s : Œπ ‚Üí set X}
(hs : locally_finite s) (hs' : ‚àÄ i, is_closed (s i)) (x : X) :
‚àÄ·∂† y in ùìù x, {i | y ‚àà s i} ‚äÜ {i | x ‚àà s i} :=
begin
  apply mem_of_superset (hs.Inter_compl_mem_nhds hs' x),
  intros y hy i hi,
  simp only [mem_Inter, mem_compl_iff] at hy,
  exact not_imp_not.mp (hy i) hi
end
