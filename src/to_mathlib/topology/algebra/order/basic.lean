import topology.algebra.order.basic

open_locale topological_space
open filter set

variables {Œ± : Type*}  [linear_order Œ±] [no_max_order Œ±] [no_min_order Œ±]
  [topological_space Œ±] [order_topology Œ±]

-- TODO: golf the next proof

lemma has_basis_nhds_set_Iic (a : Œ±) : (ùìùÀ¢ $ Iic a).has_basis (Œª b, a < b) (Œª b, Iio b) :=
‚ü®begin
  intros u,
  rw [mem_nhds_set_iff_forall],
  simp only [mem_Iic, exists_prop],
  split,
  { intros h,
    have : ‚àÄ x ‚â§ a, ‚àÉ p : Œ± √ó Œ±, x ‚àà Ioo p.1 p.2 ‚àß Ioo p.1 p.2 ‚äÜ u,
    { intros x hx,
      rcases (nhds_basis_Ioo x).mem_iff.mp (h x hx) with ‚ü®‚ü®c, d‚ü©, ‚ü®hc, hd‚ü©, H‚ü©,
      exact ‚ü®(c, d), ‚ü®hc, hd‚ü©, H‚ü© },
    choose! p hp using this,
    rcases (nhds_basis_Ioo a).mem_iff.mp (h a le_rfl) with ‚ü®‚ü®c, d‚ü©, ‚ü®hc, hd‚ü©, H‚ü©,
    dsimp only at H hc hd,
    use [d, hd],
    rintros x (hx : x < d),
    cases le_or_lt x c with hx' hx',
    { cases hp x (hx'.trans hc.le) with H H',
      exact H' H },
    { exact H ‚ü®hx', hx‚ü© }, },
  { rintros ‚ü®b, hb, hb'‚ü© x hx,
    apply mem_of_superset _ hb',
    apply Iio_mem_nhds (hx.trans_lt hb) }
end‚ü©

lemma has_basis_nhds_set_Iic' [densely_ordered Œ±] (a : Œ±) : (ùìùÀ¢ $ Iic a).has_basis (Œª b, a < b) (Œª b, Iic b) :=
‚ü®Œª u, begin
  rw (has_basis_nhds_set_Iic a).mem_iff,
  dsimp only,
  split; rintro ‚ü®b, hb, hb'‚ü©,
  { rcases exists_between hb with ‚ü®c, hc, hc'‚ü©,
    exact ‚ü®c, hc, subset_trans (Iic_subset_Iio.mpr hc') hb'‚ü© },
  { exact ‚ü®b, hb, Iio_subset_Iic_self.trans hb'‚ü© }
end‚ü©

lemma has_basis_nhds_set_Ici (a : Œ±) : (ùìùÀ¢ $ Ici a).has_basis (Œª b, b < a) (Œª b, Ioi b) :=
@has_basis_nhds_set_Iic (order_dual Œ±) _ _ _ _ _ _

lemma has_basis_nhds_set_Ici' [densely_ordered Œ±] (a : Œ±) : (ùìùÀ¢ $ Ici a).has_basis (Œª b, b < a) (Œª b, Ici b) :=
@has_basis_nhds_set_Iic' (order_dual Œ±) _ _ _ _ _ _ _
