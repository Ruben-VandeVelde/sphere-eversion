import to_mathlib.data.set.prod
import to_mathlib.data.nat.basic
import global.parametricity_for_free
import global.localized_construction
import global.localisation_data
/-!
# Gromov's theorem

We prove the h-principle for open and ample first order differential relations.
-/

noncomputable theory

open set filter model_with_corners metric
open_locale topological_space manifold

section
variables {E : Type*} [normed_add_comm_group E] [normed_space ‚Ñù E] [finite_dimensional ‚Ñù E]
  {H : Type*} [topological_space H] (I : model_with_corners ‚Ñù E H) (M : Type*)
  [topological_space M] [charted_space H M]

lemma locally_compact_manifold  :
  locally_compact_space M :=
@charted_space.locally_compact H M _ _ _ I.locally_compact

/-- A metric defining the topology on a sigma-compact T2 real manifold. -/
def manifold_metric [t2_space M] [sigma_compact_space M] : metric_space M :=
@topological_space.metrizable_space_metric _ _ (manifold_with_corners.metrizable_space I M)
end

variables
{EM : Type*} [normed_add_comm_group EM] [normed_space ‚Ñù EM] [finite_dimensional ‚Ñù EM]
{HM : Type*} [topological_space HM] {IM : model_with_corners ‚Ñù EM HM} [boundaryless IM]
{M : Type*} [topological_space M] [charted_space HM M] [smooth_manifold_with_corners IM M]
[t2_space M] [sigma_compact_space M]

{EX : Type*} [normed_add_comm_group EX] [normed_space ‚Ñù EX] [finite_dimensional ‚Ñù EX]
{HX : Type*} [topological_space HX] {IX : model_with_corners ‚Ñù EX HX} [model_with_corners.boundaryless IX]
-- note: X is a metric space
{X : Type*} [metric_space X] [charted_space HX X] [smooth_manifold_with_corners IX X]
[sigma_compact_space X]

{R : rel_mfld IM M IX X}
{A : set M} {Œ¥ : M ‚Üí ‚Ñù}

set_option trace.filter_inst_type true

lemma rel_mfld.ample.satisfies_h_principle_core
  [nonempty M] [nonempty X]
  (hRample : R.ample) (hRopen : is_open R)
  (hA : is_closed A)
  (hŒ¥_pos : ‚àÄ (x : M), 0 < Œ¥ x)
  (hŒ¥_cont : continuous Œ¥)
  (F‚ÇÄ : formal_sol R)
  (hF‚ÇÄA : ‚àÄ·∂† x near A, F‚ÇÄ.is_holonomic_at x)
  (L : localisation_data IM IX F‚ÇÄ.bs) :
  ‚àÉ F : ‚Ñï ‚Üí htpy_formal_sol R, ‚àÄ n : ‚Ñï,
    ((‚àÄ·∂† t near Iic (0 : ‚Ñù), F n t = F‚ÇÄ) ‚àß
    (‚àÄ·∂† t near Ici (1 : ‚Ñù), F n t = F n 1) ‚àß
    (‚àÄ·∂† x near A, ‚àÄ t, F n t x = F‚ÇÄ x) ‚àß
    (‚àÄ t x, dist ((F n t).bs x) (F‚ÇÄ.bs x) < Œ¥ x) ‚àß

    (‚àÄ·∂† x near ‚ãÉ i ‚â§ L.index n, (L.œÜ i) '' metric.closed_ball 0 1,
      ((F n) 1).to_one_jet_sec.is_holonomic_at x)) ‚àß
    ((L.index (n + 1)  = L.index n ‚Üí F (n + 1) = F n) ‚àß
     ‚àÄ t (x ‚àâ range (L.œÜ $ L.index $ n+1)), F (n + 1) t x = F n t x) :=
begin
  classical,
  borelize EX,
  haveI := locally_compact_manifold IM M,
  haveI := locally_compact_manifold IX X,
  let P : ‚Ñï ‚Üí htpy_formal_sol R ‚Üí Prop := Œª n Fn,
    (‚àÄ·∂† t near Iic (0 : ‚Ñù), Fn t = F‚ÇÄ) ‚àß
    (‚àÄ·∂† t near Ici (1 : ‚Ñù), Fn t = Fn 1) ‚àß
    (‚àÄ·∂† x near A, ‚àÄ t, Fn t x = F‚ÇÄ x) ‚àß
    (‚àÄ t x, dist ((Fn t).bs x) (F‚ÇÄ.bs x) < Œ¥ x) ‚àß
    (‚àÄ t x, dist ((Fn t).bs x) (F‚ÇÄ.bs x) < L.Œµ x) ‚àß
    (‚àÄ·∂† x near ‚ãÉ i ‚â§ L.index n, (L.œÜ i) '' metric.closed_ball 0 1,
      (Fn 1).is_holonomic_at x),
  let Q : ‚Ñï ‚Üí htpy_formal_sol R ‚Üí htpy_formal_sol R ‚Üí Prop := Œª n Fn Fnp1,
    (L.index (n + 1)  = L.index n ‚Üí Fnp1 = Fn) ‚àß
     ‚àÄ t, ‚àÄ x ‚àâ range (L.œÜ $ L.index $ n+1), Fnp1 t x = Fn t x,
  suffices : ‚àÉ F : ‚Ñï ‚Üí htpy_formal_sol R, ‚àÄ n, P n (F n) ‚àß Q n (F n) (F $ n+1),
  { rcases this with ‚ü®F, hF‚ü©,
    use F,
    intro n,
    cases hF n,
    tauto },
  let K‚ÇÄ : set EM := closed_ball 0 1,
  have hK‚ÇÄ : is_compact K‚ÇÄ, from is_compact_closed_ball 0 1,
  let K‚ÇÅ : set EM := closed_ball 0 2,
  have hK‚ÇÅ : is_compact K‚ÇÅ, from is_compact_closed_ball 0 2,
  have hK‚ÇÄK‚ÇÅ : K‚ÇÄ ‚äÜ interior K‚ÇÅ,
  { dsimp [K‚ÇÄ, K‚ÇÅ],
    rw interior_closed_ball (0 : EM) (by norm_num : (2 : ‚Ñù) ‚â† 0),
    exact closed_ball_subset_ball (by norm_num) },
  let œÑ := Œª x : M, min (Œ¥ x) (L.Œµ x),
  have œÑ_pos : ‚àÄ x, 0 < œÑ x, from Œª x, lt_min (hŒ¥_pos x) (L.Œµ_pos x),
  have œÑ_cont : continuous œÑ, from hŒ¥_cont.min L.Œµ_cont,
  apply exists_by_induction' P Q,
  { dsimp only [P], clear P Q,
    let F := F‚ÇÄ.const_htpy,
    have hF‚ÇÄ : ‚àÄ·∂† (t : ‚Ñù) near Iic 0, F t = F 0,
    { apply eventually_of_forall _,
      simp [F‚ÇÄ.const_htpy_eq] },
    have hF‚ÇÅ : ‚àÄ·∂† (t : ‚Ñù) near Ici 1, F t = F 1,
    { apply eventually_of_forall _,
      simp [F‚ÇÄ.const_htpy_eq] },
    have hF‚ÇÄA : ‚àÄ·∂† x near A, (F 0).is_holonomic_at x,
    { simp only [F‚ÇÄ.const_htpy_eq, hF‚ÇÄA] },
    have hFF‚ÇÄœÑ : ‚àÄ t x, dist ((F t).bs x) ((F 0).bs x) < œÑ x,
    { simp only [F‚ÇÄ.const_htpy_eq, dist_self, œÑ_pos, forall_const] },
    have hFœÜœà : ‚àÄ t, (F t).bs '' (range $ L.œÜ 0) ‚äÜ range (L.œàj 0),
    { simp only [F‚ÇÄ.const_htpy_eq, forall_const, ‚Üê range_comp, L.rg_subset_rg] },
    have hFA : ‚àÄ·∂† x near A, ‚àÄ t, F t x = F 0 x,
    { simp only [F‚ÇÄ.const_htpy_eq, eq_self_iff_true, eventually_true, forall_const] },
    have hFC : ‚àÄ·∂† x near ‚àÖ, (F 1).is_holonomic_at x,
    { simp only [nhds_set_empty] },
    rcases (L.œÜ 0).improve_htpy_formal_sol (L.œàj 0) hRample hRopen hA is_closed_empty
      œÑ_pos œÑ_cont hF‚ÇÄ hF‚ÇÅ hF‚ÇÄA hFF‚ÇÄœÑ hFœÜœà hFA hFC hK‚ÇÄ hK‚ÇÅ hK‚ÇÄK‚ÇÅ with ‚ü®F', hF'‚ÇÄ, hF'‚ÇÅ, hF'F‚ÇÄœÑ, hF'K‚ÇÅ, hF'œÑ, hF'K‚ÇÄ‚ü©,
    rw [nhds_set_union, eventually_sup] at hF'K‚ÇÄ,
    refine ‚ü®F', _, _, _, _, _, _‚ü©,
    { apply hF'‚ÇÄ.mono,
      intros t ht,
      rw [ht, F‚ÇÄ.const_htpy_eq] },
    { exact hF'‚ÇÅ },
    { exact hF'F‚ÇÄœÑ },
    { exact Œª t x, lt_of_lt_of_le (hF'œÑ t x) (min_le_left _ _) },
    { exact Œª t x, lt_of_lt_of_le (hF'œÑ t x) (min_le_right _ _) },
    { rw L.Union_le_zero,
      simpa using hF'K‚ÇÄ.2 } },
  { rintros n F ‚ü®hF‚ÇÄ, hF‚ÇÅ, hFA, hFŒ¥, hFŒµ, hFhol‚ü©,
    by_cases hn : L.index (n+1) = L.index n,
    { refine ‚ü®F, ‚ü®hF‚ÇÄ, hF‚ÇÅ, hFA, hFŒ¥, hFŒµ, _‚ü©, Œª _, rfl, Œª _ _ _, rfl‚ü© ; clear P Q,
      rw hn,
      exact hFhol },
    { dsimp only [P, Q], clear P Q,
      have hF‚ÇÄ‚ÇÄ := hF‚ÇÄ.on_set 0 right_mem_Iic,
      simp only [‚Üê hF‚ÇÄ.on_set 0 right_mem_Iic] at hF‚ÇÄ hF‚ÇÄA hFŒ¥ hFŒµ hFA ‚ä¢,
      have hFœÑ : ‚àÄ t x, dist ((F t).bs x) ((F 0).bs x) <  œÑ x,
      { exact Œª t x, lt_min (hFŒ¥ t x) (hFŒµ t x) },
      rcases (L.œÜ $ L.index $ n+1).improve_htpy_formal_sol (L.œàj $ L.index $ n+1) hRample hRopen
        hA _ œÑ_pos œÑ_cont hF‚ÇÄ hF‚ÇÅ hF‚ÇÄA hFœÑ _ hFA hFhol hK‚ÇÄ hK‚ÇÅ hK‚ÇÄK‚ÇÅ  with
        ‚ü®F', hF'‚ÇÄ, hF'‚ÇÅ, hF'A, hF'K‚ÇÅ, hF'œÑ, hF'K‚ÇÄ‚ü©,
      rw [nhds_set_union, eventually_sup] at hF'K‚ÇÄ,
      refine ‚ü®F', ‚ü®hF'‚ÇÄ, hF'‚ÇÅ, _, _, _, _‚ü©, _, _‚ü© ; clear hRample hRopen hŒ¥_pos hŒ¥_cont hK‚ÇÄ hK‚ÇÅ hK‚ÇÄK‚ÇÅ,
      { exact hF'A },
      { exact Œª t x, lt_of_lt_of_le (hF'œÑ t x) (min_le_left _ _) },
      { exact Œª t x, lt_of_lt_of_le (hF'œÑ t x) (min_le_right _ _) },
      { rw L.Union_succ,
        exact hF'K‚ÇÄ.2, },
      { exact Œª hn', (hn hn').elim },
      { exact Œª t x hx, hF'K‚ÇÅ t x (Œª hx', hx $ mem_range_of_mem_image _ _ hx') },
      { exact L.is_closed_Union hK‚ÇÄ n },
      { intro t,
        rw ‚Üê range_comp,
        apply L.Œµ_spec,
        simp only [‚Üê hF‚ÇÄ‚ÇÄ],
        apply hFŒµ } } },
end

/-- The non-parametric version of Gromov's theorem -/
lemma rel_mfld.ample.satisfies_h_principle (hRample : R.ample) (hRopen : is_open R)
  (hA : is_closed A)
  (hŒ¥_pos : ‚àÄ x, 0 < Œ¥ x) (hŒ¥_cont : continuous Œ¥) :
  R.satisfies_h_principle A Œ¥ :=
begin
  haveI := locally_compact_manifold IM M,
  haveI := locally_compact_manifold IX X,
  refine rel_mfld.satisfies_h_principle_of_weak hA _,
  unfreezingI { clear_dependent A },
  intros A hA ùìï‚ÇÄ hùìï‚ÇÄ,
  casesI is_empty_or_nonempty M with hM hM,
  { refine  ‚ü®empty_htpy_formal_sol R, _, _, _, _‚ü©,
    all_goals { try { apply eventually_of_forall _ } },
    all_goals { try { intro } },
    all_goals { try { intro } },
    all_goals { apply empty_htpy_formal_sol_eq <|> apply (is_empty.false ‚ÄπM‚Ä∫).elim } },
  casesI is_empty_or_nonempty X with hX hX,
  { exfalso,
    inhabit M,
    exact (is_empty.false $ ùìï‚ÇÄ.bs default).elim },
  have cont : continuous ùìï‚ÇÄ.bs, from ùìï‚ÇÄ.smooth_bs.continuous,
  let L : localisation_data IM IX ùìï‚ÇÄ.bs := std_localisation_data EM IM EX IX cont,
  let œÄ := L.index,

  suffices : ‚àÉ F : ‚Ñï ‚Üí htpy_formal_sol R, ‚àÄ n,
    ((F n 0 = ùìï‚ÇÄ) ‚àß
    (‚àÄ t, ‚àÄ·∂† x near A, F n t x = ùìï‚ÇÄ x) ‚àß
    (‚àÄ t x, dist ((F n t).bs x) (ùìï‚ÇÄ.bs x) < Œ¥ x) ‚àß

    (‚àÄ x ‚àà ‚ãÉ i ‚â§ œÄ n, L.œÜ i '' metric.closed_ball (0 : EM) 1,
             (F n 1).is_holonomic_at x)) ‚àß
    ((œÄ (n+1) = œÄ n ‚Üí F (n+1) = F n) ‚àß
     (‚àÄ t, ‚àÄ x ‚àâ range (L.œÜ $ œÄ (n+1)), F (n+1) t x = F n t x)),
  { clear_dependent hRample hRopen,
    simp_rw [and_assoc, forall_and_distrib] at this,
    rcases this with ‚ü®F, hF‚ÇÄ, hfA, hFŒ¥, hFhol, hFœÄ, hFultim‚ü©,
    let FF := Œª n : ‚Ñï, Œª p : ‚Ñù √ó M, F n p.1 p.2,
    have h : ‚àÄ n : ‚Ñï, ‚àÄ x ‚àâ (univ : set ‚Ñù) √óÀ¢ range (L.œÜ $ œÄ $ n+1), FF (n+1) x = FF n x,
    { rintros n ‚ü®t, x‚ü© H,
      exact hFultim _ _ _ (Œª hx, H ‚ü®trivial, hx‚ü©) },
    have h' : ‚àÄ (n : ‚Ñï), œÄ (n + 1) = œÄ n ‚Üí FF (n + 1) = FF n,
    { intros n hn,
      ext1 ‚ü®t, x‚ü©,
      dsimp [FF],
      rw hFœÄ n hn },
    have loc_fin : locally_finite (Œª i, (univ √óÀ¢ range (L.œÜ i) : set $ ‚Ñù √ó M)),
    { rintros ‚ü®t, x‚ü©,
      rcases L.lf_œÜ x with ‚ü®s, s_in, hs‚ü©,
      refine ‚ü®univ √óÀ¢ s, _, _‚ü©,
      { rw nhds_prod_eq,
        exact filter.prod_mem_prod filter.univ_mem s_in },
      { convert hs,
        ext i,
        simp [univ_prod_inter_univ_prod] } },
    have : ‚àÄ x : ‚Ñù √ó M, ‚àÄ·∂† n in at_top, x.2 ‚àà ‚ãÉ i ‚â§ œÄ n, (L.œÜ i) '' metric.ball 0 1,
    { rintros ‚ü®t, x‚ü©,
      rw [eventually_at_top],
      rcases (mem_top.mpr L.h‚ÇÅ x) with ‚ü®-, ‚ü®i, rfl‚ü©, hi : x ‚àà (L.œÜ i) '' metric.ball 0 1‚ü©,
      refine ‚ü®indexing.to_nat i, Œª n hn, _‚ü©,
      have : i ‚â§ œÄ n,
      { rw ‚Üê indexing.from_to i,
        exact indexing.mono_from hn },
      exact mem_bUnion this hi },
    cases loc_fin.exists_forall_eventually_of_indexing h h' with G hG, clear h h' loc_fin,
    choose n hn' hn using Œª x, eventually_at_top.mp ((this x).and (hG x)), clear hG this,
    have G_eq : ‚àÄ t x, G (t, x) = F (n (t, x)) t x,
    { exact Œª t x, ((hn (t, x) _ le_rfl).eq_of_nhds).symm },
    have hG11 : ‚àÄ t x, (G (t, x)).1.1 = x,
    { intros t x,
      rw G_eq,
      refl },
    let ùìï : htpy_formal_sol R := {
      bs := Œª t x, (G (t, x)).1.2,
      œï := Œª t x, (G (t, x)).2,
      smooth' := begin
        intro x,
        apply ((F (n x)).smooth' x).congr_of_eventually_eq,
        apply (hn x _ le_rfl).mono,
        intros p hp,
        dsimp only,
        rw [show (p.1, p.2) = p, from prod.ext rfl rfl, ‚Üê hp],
        refl
      end,
      is_sol' := begin
        intros t x,
        change one_jet_bundle.mk x (G (t, x)).1.2 (G (t, x)).2 ‚àà R,
        rw ‚Üê (hn (t, x) _ le_rfl).eq_of_nhds,
        exact (F (n (t, x))).is_sol' t x,
      end },
    refine ‚ü®ùìï, _, _, _, _‚ü©,
    { clear_dependent Œ¥ hfA hFhol hFœÄ hFultim,
      intro x,
      ext1,
      { refl },
      { change (G (0, x)).1.2 = _,
        rw [G_eq, hF‚ÇÄ] },
      { change (G (0, x)).2 = _,
        rw [G_eq, hF‚ÇÄ] } },
    { clear_dependent Œ¥ hF‚ÇÄ hfA hFœÄ hFultim,
      intro x,
      have : x ‚àà ‚ãÉ i ‚â§ œÄ (n (1, x)), (L.œÜ i) '' metric.closed_ball 0 1,
      { have : x ‚àà _ := hn' (1, x) _ le_rfl,
        apply set.bUnion_mono subset_rfl _ this,
        rintros i -,
        exact image_subset _ metric.ball_subset_closed_ball, },
      apply (hFhol (n (1, x)) x this).congr, clear this,
      have : F (n (1, x)) 1 =·∂†[ùìù x] (Œª x, G (1, x)),
      { exact (hn (1, x) (n(1, x)) le_rfl).slice },
      apply this.mono, clear this,
      rintros y (hy : F (n (1, x)) 1 y = G (1, y)),
      change F (n (1, x)) 1 y = ùìï 1 y,
      rw hy,
      change G (1, y) = ùìï 1 y,
      ext ; try { refl },
      rw hG11,
      refl },
    { clear_dependent Œ¥ hF‚ÇÄ hFhol hFœÄ hFultim,
      intros x x_in t,
      rw [‚Üê (hfA (n (t, x)) t).nhds_set_forall_mem x x_in, ‚Üê G_eq],
      ext ; try { refl },
      rw hG11, refl, },
    { clear_dependent hF‚ÇÄ hFhol hFœÄ hFultim hfA,
      intros t x,
      apply le_of_lt,
      change dist (G (t, x)).1.2 (ùìï‚ÇÄ.bs x) < Œ¥ x,
      rw ‚Üê (hn (t, x) _ le_rfl).eq_of_nhds,
      exact hFŒ¥ (n (t, x)) t x } },
  -- The next six lines work around the fact that the statement of `satisfies_h_principle_core`
  -- is now slightly too strong. This should be aligned at some point.
  rcases hRample.satisfies_h_principle_core hRopen hA hŒ¥_pos hŒ¥_cont ùìï‚ÇÄ hùìï‚ÇÄ L with ‚ü®F, h‚ü©,
  refine ‚ü®F, Œª n, _‚ü©,
  rcases h n with ‚ü®‚ü®h‚ÇÄ, h‚ÇÅ, h‚ÇÇ, h‚ÇÉ, h‚ÇÑ‚ü©, h‚ÇÖ, h‚ÇÜ‚ü©,
  refine ‚ü®‚ü®_, _, _, _‚ü©, _, _‚ü©,
  all_goals { try { assumption} },
  exact h‚ÇÄ.on_set 0 right_mem_Iic,
  exact h‚ÇÇ.forall,
  exact h‚ÇÑ.on_set,
end

variables
{EP : Type*} [normed_add_comm_group EP] [normed_space ‚Ñù EP]  [finite_dimensional ‚Ñù EP]
{HP : Type*} [topological_space HP] {IP : model_with_corners ‚Ñù EP HP} [boundaryless IP]
{P : Type*} [topological_space P] [charted_space HP P] [smooth_manifold_with_corners IP P]
[sigma_compact_space P]
[t2_space P]
{C : set (P √ó M)}

/-- **Gromov's Theorem** -/
theorem rel_mfld.ample.satisfies_h_principle_with (hRample : R.ample) (hRopen : is_open R)
  (hC : is_closed C)
  (hŒ¥_pos : ‚àÄ x, 0 < Œ¥ x) (hŒ¥_cont : continuous Œ¥) :
  R.satisfies_h_principle_with IP C Œ¥ :=
begin
  have hŒ¥_pos' : ‚àÄ (x : P √ó M), 0 < Œ¥ x.2 := Œª (x : P √ó M), hŒ¥_pos x.snd,
  have hŒ¥_cont' : continuous (Œª (x : P √ó M), Œ¥ x.2) := hŒ¥_cont.comp continuous_snd,
  have is_op : is_open (rel_mfld.relativize IP P R) := R.is_open_relativize hRopen,
  apply rel_mfld.satisfies_h_principle.satisfies_h_principle_with,
  exact (hRample.relativize IP P).satisfies_h_principle is_op hC hŒ¥_pos' hŒ¥_cont',
end

variables
{E' : Type*} [normed_add_comm_group E'] [normed_space ‚Ñù E'] [finite_dimensional ‚Ñù E']
{H' : Type*} [topological_space H'] {I' : model_with_corners ‚Ñù E' H'} [model_with_corners.boundaryless I']
{M' : Type*} [topological_space M'] [charted_space H' M'] [smooth_manifold_with_corners I' M']
[sigma_compact_space M'] [t2_space M']

include IP

/-- Gromov's Theorem without metric space assumption -/
@[main_declaration] theorem rel_mfld.ample.satisfies_h_principle_with' {R : rel_mfld IM M I' M'}
  (hRample : R.ample) (hRopen : is_open R) (hC : is_closed C)
  (hŒ¥_pos : ‚àÄ x, 0 < Œ¥ x) (hŒ¥_cont : continuous Œ¥) :
  by letI := manifold_metric I' M' ; exact
  R.satisfies_h_principle_with IP C Œ¥ :=
by apply rel_mfld.ample.satisfies_h_principle_with; assumption
