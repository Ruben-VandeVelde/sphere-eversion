import global.localisation

noncomputable theory

open set filter model_with_corners metric
open_locale topological_space manifold

set_option trace.filter_inst_type true

variables
{EM : Type*} [normed_add_comm_group EM] [normed_space ‚Ñù EM] [finite_dimensional ‚Ñù EM]
{HM : Type*} [topological_space HM] {IM : model_with_corners ‚Ñù EM HM} [boundaryless IM]
{M : Type*} [topological_space M] [charted_space HM M] [smooth_manifold_with_corners IM M]
[t2_space M]
[locally_compact_space M] -- FIXME: investigate how to deduce this from finite-dimensional
[nonempty M] -- FIXME: investigate how to remove this
[sigma_compact_space M]

{EX : Type*} [normed_add_comm_group EX] [normed_space ‚Ñù EX] [finite_dimensional ‚Ñù EX]
  [measurable_space EX] [borel_space EX]
{HX : Type*} [topological_space HX] {IX : model_with_corners ‚Ñù EX HX} [model_with_corners.boundaryless IX]
-- note: X is a metric space
{X : Type*} [metric_space X] [charted_space HX X] [smooth_manifold_with_corners IX X]
[locally_compact_space X] -- FIXME: investigate how to deduce this from finite-dimensional
[sigma_compact_space X]
[nonempty X] -- FIXME: investigate how to remove this


lemma open_smooth_embedding.improve_htpy_formal_sol
  (œÜ : open_smooth_embedding ùìò(‚Ñù, EM) EM IM M)
  (œà : open_smooth_embedding ùìò(‚Ñù, EX) EX IX X)
  {R : rel_mfld IM M IX X}
  (hRample : R.ample)
  (hRopen : is_open R)
  {A C : set M}
  (hA : is_closed A)
  (hC : is_closed C)
  {Œ¥ : M ‚Üí ‚Ñù}
  (hŒ¥_pos : ‚àÄ x, 0 < Œ¥ x)
  (hŒ¥_cont : continuous Œ¥)
  {F : htpy_formal_sol R}
  (hF‚ÇÄA : ‚àÄ·∂† x near A, (F 0).is_holonomic_at x)
  (hFF‚ÇÄŒ¥ : ‚àÄ t x, dist ((F t).bs x) ((F 0).bs x) < Œ¥ x)
  (hFœÜœà : ‚àÄ t, (F t).bs '' (range œÜ) ‚äÜ range œà)
  (hFA : ‚àÄ t, ‚àÄ·∂† x near A, F t x = F 0 x)
  (hFC : ‚àÄ·∂† x near C, (F 1).is_holonomic_at x)
  {K‚ÇÄ K‚ÇÅ : set EM}
  (hK‚ÇÄ : is_compact K‚ÇÄ)
  (hK‚ÇÅ : is_compact K‚ÇÅ)
  (hK‚ÇÄK‚ÇÅ : K‚ÇÄ ‚äÜ interior K‚ÇÅ) :
  ‚àÉ F' : htpy_formal_sol R,
    F' 0 = F 0 ‚àß
    (‚àÄ t, ‚àÄ·∂† x near A, (F' t) x = F 0 x) ‚àß
    (‚àÄ t, ‚àÄ·∂† x near C, (F' t) x = F t x) ‚àß
    (‚àÄ t, ‚àÄ x ‚àâ œÜ '' K‚ÇÅ, F' t x = F t x) ‚àß
    (‚àÄ t x, dist ((F' t).bs x) ((F 0).bs x) < Œ¥ x) ‚àß
    ‚àÄ·∂† x near A ‚à™ œÜ '' K‚ÇÄ, (F' 1).is_holonomic_at x :=
begin
  let Rloc : rel_loc EM EX := (R.localize œÜ œà).rel_loc,
  have hRloc_op : is_open Rloc,
  sorry { exact  is_open_of_is_open _ (hRopen.preimage $ one_jet_bundle.continuous_transfer _ _) },
  have hRloc_ample : Rloc.is_ample,
  sorry { exact ample_of_ample _ (hRample.localize _ _) },
  -- TODO: try to be consistent about how to state the hFœÜœà condition
  replace hFœÜœà : ‚àÄ (t : ‚Ñù), range ((F t).bs ‚àò œÜ) ‚äÜ range œà,
  sorry { intro t,
    rw range_comp,
    exact hFœÜœà t },
  let p : chart_pair IM M IX X :=
  { œÜ := œÜ,
    œà := œà,
    K‚ÇÅ := K‚ÇÅ,
    hK‚ÇÅ := hK‚ÇÅ },
  let ùìï : Rloc.htpy_formal_sol := F.localize p hFœÜœà,
  let ùìï' : Rloc.htpy_formal_sol := sorry, -- coming from Chapter 2
  have hcompat : p.compat F ùìï',
  {
    sorry },
  have hùìï'rel : ‚àÄ t, ‚àÄ x ‚àâ closed_ball (0 : EM) 2, ùìï' t x = F.localize p hFœÜœà t x,
  {
    sorry },
  have hùìï'relA : ‚àÄ t, ‚àÄ·∂† x near œÜ ‚Åª¬π' A, ùìï' t x = F.localize p hFœÜœà 0 x,
  {
    sorry },
  have hùìï'relA' : ‚àÄ t, ‚àÄ·∂† x near A, ‚àÄ e, x = œÜ e ‚Üí ùìï' t e = F.localize p hFœÜœà 0 e,
  {
    sorry },
  have hùìï'relC : ‚àÄ t, ‚àÄ·∂† x near C, ‚àÄ e, x = œÜ e ‚Üí ùìï' t e = F.localize p hFœÜœà t e,
  {
    sorry },
  have hùìï'‚ÇÄ : ùìï' 0 = ùìï 0,
  {
    sorry },
  have hùìï'hol : ‚àÄ·∂† x near A ‚à™ œÜ '' K‚ÇÄ, ‚àÄ e, x = œÜ e ‚Üí (ùìï' 1).is_holonomic_at e,
  {
    sorry },
  let F' : htpy_formal_sol R := p.update F ùìï',
  refine ‚ü®p.update F ùìï', _, _, _, _, _, _‚ü©,
  sorry { rw p.update_eq_of_forall F ùìï' (Œª _, _),
    rw hùìï'‚ÇÄ,
    refl, },
  sorry { intros t,
    apply ((hùìï'relA' t).and $ hFA t).mono,
    rintros x ‚ü®H, H'‚ü©,
    by_cases hx : x ‚àà range œÜ,
    { rcases hx with ‚ü®e, rfl‚ü©,
      have : ‚àÄ (hF : p.accepts F), (ùìï' t) e = ((F.localize p hF) t) e,
      { intros hF,
        rw [H e rfl, htpy_formal_sol.localize_eq_of_eq p F hF H'],
        refl },
      rw p.update_eq_of_eq F ùìï' this,
      exact H' },
    { rw [p.update_eq_of_not_mem, H'],
      exact  (Œª hx', hx (mem_range_of_mem_image œÜ _ hx')) } },
  sorry { intro t,
    apply (hùìï'relC t).mono,
    intros x H,
    by_cases hx : x ‚àà range œÜ,
    { rcases hx with ‚ü®e, rfl‚ü©,
      rw [p.update_eq_of_eq F ùìï' (Œª hF, _)],
      rw H e rfl,
      refl },
    { rw [p.update_eq_of_not_mem],
      exact (Œª hx', hx (mem_range_of_mem_image œÜ _ hx')) } },
  sorry { exact Œª _ _, p.update_eq_of_not_mem _ _ },
  {
    sorry },
  sorry { rw [nhds_set_union, eventually_sup] at hùìï'hol ‚ä¢,
    clear hFF‚ÇÄŒ¥ hùìï'rel hùìï'relA hùìï'relA' hùìï'relC hFC hŒ¥_pos hŒ¥_cont Œ¥ hRloc_op hRloc_ample hRample hRopen,
    split,
    { apply ((hùìï'hol.1.eventually_nhds_set.and (hFA 1).eventually_nhds_set).and hF‚ÇÄA).mono, clear hùìï'hol,
      intros x H,
      by_cases hx : x ‚àà range œÜ,
      { rcases hx with ‚ü®e, rfl‚ü©,
        rw p.update_is_holonomic_at_iff hcompat,
        exact (H.1.1.self_of_nhds e rfl) },
      { rw p.update_is_holonomic_at_iff' hx hcompat,
        exact H.2.congr (eventually_eq.symm H.1.2) } },
    { have : ‚àÄ·∂† x near œÜ '' K‚ÇÄ, x ‚àà range p.œÜ,
      { exact p.œÜ.is_open_range.forall_near_mem_of_subset (image_subset_range _ _) },
      apply (this.and hùìï'hol.2).mono,
      rintros x ‚ü®‚ü®e, rfl‚ü©, H‚ü©,
      rw p.update_is_holonomic_at_iff hcompat,
      exact H e rfl } },
end
