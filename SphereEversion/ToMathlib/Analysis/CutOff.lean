import Mathlib.Geometry.Manifold.PartitionOfUnity
import Mathlib.Topology.EMetricSpace.Paracompact
import SphereEversion.ToMathlib.Topology.NhdsSet

open Set Filter

open scoped Manifold Topology

theorem exists_contDiff_zero_one {E : Type _} [NormedAddCommGroup E] [NormedSpace ‚Ñù E]
    [FiniteDimensional ‚Ñù E] {s t : Set E} (hs : IsClosed s) (ht : IsClosed t) (hd : Disjoint s t) :
    ‚àÉ f : E ‚Üí ‚Ñù, ContDiff ‚Ñù ‚ä§ f ‚àß EqOn f 0 s ‚àß EqOn f 1 t ‚àß ‚àÄ x, f x ‚àà Icc (0 : ‚Ñù) 1 :=
  let ‚ü®f, hfs, hft, hf01‚ü© := exists_smooth_zero_one_of_closed ùìò(‚Ñù, E) hs ht hd
  ‚ü®f, f.smooth.contDiff, hfs, hft, hf01‚ü©

theorem exists_contDiff_zero_one_nhds {E : Type _} [NormedAddCommGroup E] [NormedSpace ‚Ñù E]
    [FiniteDimensional ‚Ñù E] {s t : Set E} (hs : IsClosed s) (ht : IsClosed t) (hd : Disjoint s t) :
    ‚àÉ f : E ‚Üí ‚Ñù, ContDiff ‚Ñù ‚ä§ f ‚àß (‚àÄ·∂† x in ùìùÀ¢ s, f x = 0) ‚àß (‚àÄ·∂† x in ùìùÀ¢ t, f x = 1) ‚àß
      ‚àÄ x, f x ‚àà Icc (0 : ‚Ñù) 1 := by
  rcases normal_exists_closure_subset hs ht.isOpen_compl
      (subset_compl_iff_disjoint_left.mpr hd.symm)
    with ‚ü®u, u_op, hsu, hut‚ü©
  have hcu : IsClosed (closure u) := isClosed_closure
  rcases normal_exists_closure_subset ht hcu.isOpen_compl (subset_compl_comm.mp hut) with
    ‚ü®v, v_op, htv, hvu‚ü©
  have hcv : IsClosed (closure v) := isClosed_closure
  rcases exists_contDiff_zero_one hcu hcv (subset_compl_iff_disjoint_left.mp hvu) with
    ‚ü®f, hfsmooth, hfu, hfv, hf‚ü©
  refine' ‚ü®f, hfsmooth, _, _, hf‚ü©
  apply eventually_of_mem (mem_of_superset (u_op.mem_nhdsSet.mpr hsu) subset_closure) hfu
  apply eventually_of_mem (mem_of_superset (v_op.mem_nhdsSet.mpr htv) subset_closure) hfv

theorem exists_contDiff_one_nhds_of_interior {E : Type _} [NormedAddCommGroup E] [NormedSpace ‚Ñù E]
    [FiniteDimensional ‚Ñù E] {s t : Set E} (hs : IsClosed s) (hd : s ‚äÜ interior t) :
    ‚àÉ f : E ‚Üí ‚Ñù, ContDiff ‚Ñù ‚ä§ f ‚àß (‚àÄ·∂† x in ùìùÀ¢ s, f x = 1) ‚àß (‚àÄ x, x ‚àâ t ‚Üí f x = 0) ‚àß
      ‚àÄ x, f x ‚àà Icc (0 : ‚Ñù) 1 := by
  have : IsClosed (interior t)·∂ú := isOpen_interior.isClosed_compl
  rcases exists_contDiff_zero_one_nhds this hs
    (by rwa [‚Üê subset_compl_iff_disjoint_left, compl_compl]) with ‚ü®f, hfsmooth, h0, h1, hf‚ü©
  refine ‚ü®f, hfsmooth, h1, fun x hx ‚Ü¶ ?_, hf‚ü©
  exact h0.self_of_nhdsSet _ fun hx' ‚Ü¶ hx <| interior_subset hx'
