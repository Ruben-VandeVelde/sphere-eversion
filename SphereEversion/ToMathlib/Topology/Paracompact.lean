import Mathbin.Topology.Paracompact
import Mathbin.Data.Real.Basic
import Mathbin.Data.Nat.Interval
import Project.ToMathlib.Data.Set.Basic
import Project.ToMathlib.Data.Set.Finite

open scoped Topology

open Set Function

/-- We could generalise and replace `Œπ √ó ‚Ñù` with a dependent family of types but it doesn't seem
worth it. Proof partly based on `refinement_of_locally_compact_sigma_compact_of_nhds_basis_set`. -/
theorem exists_countable_locallyFinite_cover {Œπ X : Type _} [TopologicalSpace X] [T2Space X]
    [LocallyCompactSpace X] [SigmaCompactSpace X] {c : Œπ ‚Üí X} {W : Œπ ‚Üí ‚Ñù ‚Üí Set X}
    {B : Œπ ‚Üí ‚Ñù ‚Üí Set X} {p : Œπ ‚Üí ‚Ñù ‚Üí Prop} (hc : Surjective c) (hW‚ÇÄ : ‚àÄ i r, p i r ‚Üí c i ‚àà W i r)
    (hW‚ÇÅ : ‚àÄ i r, p i r ‚Üí IsOpen (W i r)) (hB : ‚àÄ i, (ùìù (c i)).HasBasis (p i) (B i)) :
    ‚àÉ s : Set (Œπ √ó ‚Ñù),
      s.Countable ‚àß
        (‚àÄ z ‚àà s, (‚Üøp) z) ‚àß (‚ãÉ z ‚àà s, (‚ÜøW) z) = univ ‚àß LocallyFinite (‚ÜøB ‚àò (coe : s ‚Üí Œπ √ó ‚Ñù)) :=
  by
  let K' := CompactExhaustion.choice X
  let K := K'.shiftr.shiftr
  let C : ‚Ñï ‚Üí Set X := fun n => K (n + 2) \ interior (K (n + 1))
  let U : ‚Ñï ‚Üí Set X := fun n => interior (K (n + 3)) \ K n
  have hCU : ‚àÄ n, C n ‚äÜ U n := fun n x hx =>
    ‚ü®K.subset_interior_succ _ hx.1, mt (fun hx‚ÇÉ => K.subset_interior_succ _ hx‚ÇÉ) hx.2‚ü©
  have hC : ‚àÄ n, IsCompact (C n) := fun n => (K.is_compact _).diff‚Çì isOpen_interior
  have hC' : (‚ãÉ n, C n) = univ :=
    by
    refine' set.univ_subset_iff.mp fun x hx => mem_Union.mpr ‚ü®K'.find x, _‚ü©
    simpa only [K'.find_shiftr] using
      diff_subset_diff_right interior_subset (K'.shiftr.mem_diff_shiftr_find x)
  have hU : ‚àÄ n, IsOpen (U n) := fun n =>
    is_open_interior.sdiff <| IsCompact.isClosed <| K.is_compact _
  have hU' : ‚àÄ n, {m | (U m ‚à© U n).Nonempty}.Finite := fun n =>
    by
    suffices {m | (U m ‚à© U n).Nonempty} ‚äÜ Icc (n - 2) (n + 2) by exact (finite_Icc _ _).Subset this
    rintro m ‚ü®x, ‚ü®‚ü®hx‚ÇÅ, hx‚ÇÇ‚ü©, ‚ü®hx‚ÇÉ, hx‚ÇÑ‚ü©‚ü©‚ü©
    simp only [mem_Icc, tsub_le_iff_right]
    suffices ‚àÄ {a b : ‚Ñï}, x ‚àâ K a ‚Üí x ‚àà interior (K b.succ) ‚Üí a ‚â§ b by
      exact ‚ü®this hx‚ÇÑ hx‚ÇÅ, this hx‚ÇÇ hx‚ÇÉ‚ü©
    intro a b ha hb
    by_contra hab
    replace hab : b + 1 ‚â§ a; ¬∑ simpa using hab
    exact
      Set.Nonempty.ne_empty (‚ü®x, interior_subset hb, ha‚ü© : (K b.succ \ K a).Nonempty)
        (set.diff_eq_empty.mpr (K.subset hab))
  have hU'' : ‚àÄ n x, x ‚àà C n ‚Üí U n ‚àà ùìù x := fun n x hx =>
    mem_nhds_iff.mpr ‚ü®U n, subset.rfl, hU n, hCU n hx‚ü©
  have : ‚àÄ (n) (x : C n), ‚àÉ i r, ‚Üëx ‚àà W i r ‚àß B i r ‚äÜ U n ‚àß p i r :=
    by
    rintro n ‚ü®x, hx‚ü©
    obtain ‚ü®i, rfl‚ü© := hc x
    obtain ‚ü®r, hr‚ÇÅ, hr‚ÇÇ‚ü© := (hB i).mem_iff.mp (hU'' n _ hx)
    exact ‚ü®i, r, hW‚ÇÄ i r hr‚ÇÅ, hr‚ÇÇ, hr‚ÇÅ‚ü©
  choose i r h‚ÇÅ h‚ÇÇ h‚ÇÉ using fun n => this n
  let V : ‚àÄ n, C n ‚Üí Set X := fun n x => W (i n x) (r n x)
  have hV‚ÇÅ : ‚àÄ n x, IsOpen (V n x) := fun n x => hW‚ÇÅ _ _ (h‚ÇÉ n x)
  have hV‚ÇÇ : ‚àÄ n, C n ‚äÜ ‚ãÉ x : C n, V n x := fun n x hx => mem_Union.mpr ‚ü®‚ü®x, hx‚ü©, h‚ÇÅ _ _‚ü©
  choose f hf using fun n => (hC n).elim_finite_subcover (V n) (hV‚ÇÅ n) (hV‚ÇÇ n)
  classical
  let s : Set (Œπ √ó ‚Ñù) := ‚ãÉ n, (f n).image (Pi.prod (i n) (r n))
  refine'
    ‚ü®s, countable_Union fun n => Finset.countable_toSet _, fun z hz => _,
      set.univ_subset_iff.mp fun x hx => _, fun x => _‚ü©
  ¬∑ simp only [Pi.prod, mem_Union, Finset.coe_image, mem_image, Finset.mem_coe, SetCoe.exists] at hz 
    obtain ‚ü®n, x, hx, -, rfl‚ü© := hz
    apply h‚ÇÉ
  ¬∑ obtain ‚ü®n, hn‚ü© := Union_eq_univ_iff.mp hC' x
    specialize hf n hn
    simp only [Union_coe_set, mem_Union, exists_prop] at hf 
    obtain ‚ü®y, hy‚ÇÅ, hy‚ÇÇ, hy‚ÇÉ‚ü© := hf
    simp only [Pi.prod, mem_Union, Finset.mem_coe, Finset.mem_image, exists_prop, SetCoe.exists,
      Union_exists, exists_and_right, Prod.exists, Prod.mk.inj_iff]
    exact ‚ü®i n ‚ü®y, hy‚ÇÅ‚ü©, r n ‚ü®y, hy‚ÇÅ‚ü©, ‚ü®n, y, hy‚ÇÅ, hy‚ÇÇ, rfl, rfl‚ü©, hy‚ÇÉ‚ü©
  ¬∑ obtain ‚ü®n, hn‚ü© := Union_eq_univ_iff.mp hC' x
    refine' ‚ü®U n, hU'' n x hn, _‚ü©
    let P : Œπ √ó ‚Ñù ‚Üí Prop := fun z => ((‚ÜøB) (z : Œπ √ó ‚Ñù) ‚à© U n).Nonempty
    rw [(Equiv.Set.sep s P).symm.set_finite_iff]
    simp only [s, P, Set.iUnion_inter, sep_eq_inter_set_of]
    refine' Set.finite_Union' (fun m => Set.toFinite _) (hU' n) fun m hm => _
    rw [Set.eq_empty_iff_forall_not_mem]
    intro z
    simp only [Pi.prod, Finset.coe_image, mem_inter_iff, mem_image, Finset.mem_coe, SetCoe.exists,
      mem_set_of_eq, not_and, bex_imp, and_imp]
    rintro x hx‚ÇÅ hx‚ÇÇ rfl
    rw [Set.not_nonempty_iff_eq_empty]
    have := Set.inter_subset_inter_left (U n) (h‚ÇÇ m ‚ü®x, hx‚ÇÅ‚ü©)
    rwa [set.not_nonempty_iff_eq_empty.mp hm, Set.subset_empty_iff] at this 

