import Mathbin.Topology.MetricSpace.HausdorffDistance

open Set Metric

open scoped Topology

variable {Œ± Œ≤ : Type _} [PseudoMetricSpace Œ±] [PseudoMetricSpace Œ≤]

namespace Metric

theorem thickening_ball (x : Œ±) (Œµ Œ¥ : ‚Ñù) : thickening Œµ (ball x Œ¥) ‚äÜ ball x (Œµ + Œ¥) :=
  by
  intro y
  simp only [mem_thickening_iff, mem_ball]
  rintro ‚ü®z, hz, hz'‚ü©
  calc
    dist y x ‚â§ dist y z + dist z x := dist_triangle _ _ _
    _ < Œµ + Œ¥ := add_lt_add hz' hz

theorem infDist_pos_iff_not_mem_closure {x : Œ±} {s : Set Œ±} (hs : s.Nonempty) :
    0 < infDist x s ‚Üî x ‚àâ closure s := by
  rw [is_closed_closure.not_mem_iff_inf_dist_pos hs.closure, inf_dist_eq_closure]

end Metric

open Metric

theorem IsCompact.exists_thickening_image {f : Œ± ‚Üí Œ≤} {K : Set Œ±} {U : Set Œ≤} (hK : IsCompact K)
    (ho : IsOpen U) (hf : Continuous f) (hKU : MapsTo f K U) :
    ‚àÉ Œµ > 0, ‚àÉ V ‚àà ùìùÀ¢ K, thickening Œµ (f '' V) ‚äÜ U :=
  by
  rcases(hK.image hf).exists_thickening_subset_open ho hKU.image_subset with ‚ü®r, hr‚ÇÄ, hr‚ü©
  refine'
    ‚ü®r / 2, half_pos hr‚ÇÄ, f ‚Åª¬π' thickening (r / 2) (f '' K),
      (is_open_thickening.preimage hf).mem_nhdsSet.2 <|
        image_subset_iff.mp <| self_subset_thickening (half_pos hr‚ÇÄ) _,
      _‚ü©
  calc
    thickening (r / 2) (f '' (f ‚Åª¬π' thickening (r / 2) (f '' K))) ‚äÜ
        thickening (r / 2) (thickening (r / 2) (f '' K)) :=
      thickening_subset_of_subset _ (image_preimage_subset _ _)
    _ ‚äÜ thickening (r / 2 + r / 2) (f '' K) := (thickening_thickening_subset _ _ _)
    _ = thickening r (f '' K) := by rw [add_halves]
    _ ‚äÜ U := hr

