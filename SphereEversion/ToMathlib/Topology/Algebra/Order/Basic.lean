import Mathlib.Topology.Order.Basic

open scoped Topology

open Filter Set

variable {Œ± : Type _} [LinearOrder Œ±] [NoMaxOrder Œ±] [NoMinOrder Œ±] [TopologicalSpace Œ±]
  [OrderTopology Œ±]

-- TODO: golf the next proof
theorem hasBasis_nhdsSet_Iic (a : Œ±) : (ùìùÀ¢ <| Iic a).HasBasis (fun b => a < b) fun b => Iio b :=
  ‚ü®by
    intro u
    rw [mem_nhdsSet_iff_forall]
    simp only [mem_Iic, exists_prop]
    constructor
    ¬∑ intro h
      have : ‚àÄ x ‚â§ a, ‚àÉ p : Œ± √ó Œ±, x ‚àà Ioo p.1 p.2 ‚àß Ioo p.1 p.2 ‚äÜ u :=
        by
        intro x hx
        rcases(nhds_basis_Ioo x).mem_iff.mp (h x hx) with ‚ü®‚ü®c, d‚ü©, ‚ü®hc, hd‚ü©, H‚ü©
        exact ‚ü®(c, d), ‚ü®hc, hd‚ü©, H‚ü©
      choose! p hp using this
      rcases(nhds_basis_Ioo a).mem_iff.mp (h a le_rfl) with ‚ü®‚ü®c, d‚ü©, ‚ü®hc, hd‚ü©, H‚ü©
      dsimp only at H hc hd
      use d, hd
      rintro x (hx : x < d)
      cases' le_or_lt x c with hx' hx'
      ¬∑ cases' hp x (hx'.trans hc.le) with H H'
        exact H' H
      ¬∑ exact H ‚ü®hx', hx‚ü©
    ¬∑ rintro ‚ü®b, hb, hb'‚ü© x hx
      apply mem_of_superset _ hb'
      apply Iio_mem_nhds (hx.trans_lt hb)‚ü©

theorem hasBasis_nhdsSet_Iic' [DenselyOrdered Œ±] (a : Œ±) :
    (ùìùÀ¢ <| Iic a).HasBasis (fun b => a < b) fun b => Iic b :=
  ‚ü®fun u => by
    rw [(hasBasis_nhdsSet_Iic a).mem_iff]
    dsimp only
    constructor <;> rintro ‚ü®b, hb, hb'‚ü©
    ¬∑ rcases exists_between hb with ‚ü®c, hc, hc'‚ü©
      exact ‚ü®c, hc, Subset.trans (Iic_subset_Iio.mpr hc') hb'‚ü©
    ¬∑ exact ‚ü®b, hb, Iio_subset_Iic_self.trans hb'‚ü©‚ü©

theorem hasBasis_nhdsSet_Ici (a : Œ±) : (ùìùÀ¢ <| Ici a).HasBasis (fun b => b < a) fun b => Ioi b :=
  @hasBasis_nhdsSet_Iic (OrderDual Œ±) _ _ _ _ _ _

theorem hasBasis_nhdsSet_Ici' [DenselyOrdered Œ±] (a : Œ±) :
    (ùìùÀ¢ <| Ici a).HasBasis (fun b => b < a) fun b => Ici b :=
  @hasBasis_nhdsSet_Iic' (OrderDual Œ±) _ _ _ _ _ _ _

