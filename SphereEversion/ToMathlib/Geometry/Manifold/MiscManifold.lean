import SphereEversion.ToMathlib.Analysis.Calculus
import Mathlib.Geometry.Manifold.ContMDiffMFDeriv
import Mathlib.Geometry.Manifold.Algebra.Monoid
import Mathlib.Geometry.Manifold.Metrizable

open Bundle Set Function Filter

open scoped Manifold Topology

noncomputable section

section SmoothManifoldWithCorners

open SmoothManifoldWithCorners

variable {ùïú : Type _} [NontriviallyNormedField ùïú] {E : Type _} [NormedAddCommGroup E]
  [NormedSpace ùïú E] {E' : Type _} [NormedAddCommGroup E'] [NormedSpace ùïú E'] {F : Type _}
  [NormedAddCommGroup F] [NormedSpace ùïú F] {F' : Type _} [NormedAddCommGroup F'] [NormedSpace ùïú F']
  {H : Type _} [TopologicalSpace H] {I : ModelWithCorners ùïú E H} {H' : Type _} [TopologicalSpace H']
  {I' : ModelWithCorners ùïú E' H'} {G : Type _} [TopologicalSpace G] {J : ModelWithCorners ùïú F G}
  {G' : Type _} [TopologicalSpace G'] {J' : ModelWithCorners ùïú F' G'} {M : Type _}
  [TopologicalSpace M] [ChartedSpace H M] {M' : Type _} [TopologicalSpace M'] [ChartedSpace H' M']
  {N : Type _} [TopologicalSpace N] [ChartedSpace G N] {N' : Type _} [TopologicalSpace N']
  [ChartedSpace G' N'] {F'' : Type _} [NormedAddCommGroup F''] [NormedSpace ùïú F''] {E'' : Type _}
  [NormedAddCommGroup E''] [NormedSpace ùïú E''] {H'' : Type _} [TopologicalSpace H'']
  {I'' : ModelWithCorners ùïú E'' H''} {M'' : Type _} [TopologicalSpace M''] [ChartedSpace H'' M'']
  {e : PartialHomeomorph M H}

variable {f : M ‚Üí M'} {m n : ‚Ñï‚àû} {s : Set M} {x x' : M}

theorem contMDiff_prod {f : M ‚Üí M' √ó N'} :
    ContMDiff I (I'.prod J') n f ‚Üî
      (ContMDiff I I' n fun x => (f x).1) ‚àß ContMDiff I J' n fun x => (f x).2 :=
  ‚ü®fun h => ‚ü®h.fst, h.snd‚ü©, fun h => h.1.prod_mk h.2‚ü©

theorem contMDiffAt_prod {f : M ‚Üí M' √ó N'} {x : M} :
    ContMDiffAt I (I'.prod J') n f x ‚Üî
      ContMDiffAt I I' n (fun x => (f x).1) x ‚àß ContMDiffAt I J' n (fun x => (f x).2) x :=
  ‚ü®fun h => ‚ü®h.fst, h.snd‚ü©, fun h => h.1.prod_mk h.2‚ü©

theorem smooth_prod {f : M ‚Üí M' √ó N'} :
    Smooth I (I'.prod J') f ‚Üî (Smooth I I' fun x => (f x).1) ‚àß Smooth I J' fun x => (f x).2 :=
  contMDiff_prod

theorem smoothAt_prod {f : M ‚Üí M' √ó N'} {x : M} :
    SmoothAt I (I'.prod J') f x ‚Üî
      SmoothAt I I' (fun x => (f x).1) x ‚àß SmoothAt I J' (fun x => (f x).2) x :=
  contMDiffAt_prod

theorem ContMDiffWithinAt.congr_of_eventuallyEq_insert {f f' : M ‚Üí M'}
    (hf : ContMDiffWithinAt I I' n f s x) (h : f' =·∂†[ùìù[Insert.insert x s] x] f) :
    ContMDiffWithinAt I I' n f' s x :=
  hf.congr_of_eventuallyEq (h.filter_mono <| nhdsWithin_mono x <| subset_insert x s) <|
    h.self_of_nhdsWithin (mem_insert x s)

end SmoothManifoldWithCorners
