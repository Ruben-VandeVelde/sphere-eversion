import Mathlib.Analysis.Calculus.BumpFunctionInner
import Mathlib.MeasureTheory.Integral.Periodic
import SphereEversion.Loops.Surrounding
import SphereEversion.Loops.DeltaMollifier
import SphereEversion.ToMathlib.ExistsOfConvex
import SphereEversion.ToMathlib.Analysis.ContDiff

/-!
#¬†The reparametrization lemma

This file contains a proof of Gromov's parametric reparametrization lemma. It concerns the behaviour
of the average value of a loop `Œ≥ : S¬π ‚Üí F` when the loop is reparametrized by precomposing with a
diffeomorphism `S¬π ‚Üí S¬π`.

Given a loop `Œ≥ : S¬π ‚Üí F` for some real vector space `F`, one may integrate to obtain its average
`‚à´ x in 0..1, (Œ≥ x)` in `F`. Although this average depends on the loop's parametrization, it
satisfies a contraint that depends only on the image of the loop: the average is contained in the
convex hull of the image of `Œ≥`. The non-parametric version of the reparametrization lemma says that
conversely, given any point `g` in the interior of the convex hull of the image of `Œ≥`, one may find
a reparametrization of `Œ≥` whose average is `g`.

The reparametrization lemma thus allows one to reduce the problem of constructing a loop whose
average is a given point, to the problem of constructing a loop subject to a condition that depends
only on its image.

In fact the reparametrization lemma holds parametrically. Given a smooth family of loops:
`Œ≥ : E √ó S¬π ‚Üí F`, `(x, t) ‚Ü¶ Œ≥‚Çì t`, together with a smooth function `g : E ‚Üí F`, such that `g x` is
contained in the interior of the convex hull of the image of `Œ≥‚Çì` for all `x`, there exists a smooth
family of diffeomorphism `œÜ : E √ó S¬π ‚Üí S¬π`, `(x, t) ‚Ü¶ œÜ‚Çì t` such that the average of `Œ≥‚Çì ‚àò œÜ‚Çì` is
`g x` for all `x`.

The idea of the proof is simple: since `g x` is contained in the interior of the convex hull of
the image of `Œ≥‚Çì` one may find `t‚ÇÄ, t‚ÇÅ, ..., t‚Çô` and barycentric coordinates `w‚ÇÄ, w‚ÇÅ, ..., w‚Çô` such
that `g x = ‚àë·µ¢ w·µ¢ ‚Ä¢ Œ≥‚Çì(t·µ¢)`. If there were no smoothness requirement on `œÜ‚Çì` one could define
it to be a step function which spends time `w·µ¢` at each `t·µ¢`. However because there is a smoothness
condition, one rounds off the corners of the would-be step function by using a "delta mollifier"
(an approximation to a Dirac delta function).

The above construction works locally in the neighbourhood of any `x` in `E` and one uses a partition
of unity to globalise all the local solutions into the required family: `œÜ : E √ó S¬π ‚Üí S¬π`.

The key ingredients are theories of calculus, convex hulls, barycentric coordinates,
existence of delta mollifiers, partitions of unity, and the inverse function theorem.
-/


noncomputable section

open Set Function MeasureTheory intervalIntegral Filter

open scoped Topology unitInterval Manifold BigOperators

variable {E F : Type _}

variable [NormedAddCommGroup F] [NormedSpace ‚Ñù F] [FiniteDimensional ‚Ñù F]

variable [MeasurableSpace F] [BorelSpace F]

local notation "Œπ" => Fin (FiniteDimensional.finrank ‚Ñù F + 1)

section MetricSpace

variable [MetricSpace E] [LocallyCompactSpace E]

theorem Loop.tendsto_mollify_apply (Œ≥ : E ‚Üí Loop F) (h : Continuous ‚ÜøŒ≥) (x : E) (t : ‚Ñù) :
    Tendsto (fun z : E √ó ‚Ñï => (Œ≥ z.1).mollify z.2 t) ((ùìù x).Prod atTop) (ùìù (Œ≥ x t)) :=
  by
  have hŒ≥ : ‚àÄ x, Continuous (Œ≥ x) := fun x => h.comp <| Continuous.Prod.mk _
  have h2Œ≥ : ‚àÄ x, Continuous fun z => Œ≥ z x := fun x => h.comp <| Continuous.Prod.mk_left _
  simp_rw [Loop.mollify_eq_convolution _ (hŒ≥ _)]
  rw [‚Üê add_zero (Œ≥ x t)]
  refine' tendsto.add _ _
  ¬∑ rw [‚Üê one_smul ‚Ñù (Œ≥ x t)]
    refine' ((tendsto_coe_nat_div_add_atTop 1).comp tendsto_snd).smul _
    refine' ContDiffBump.convolution_tendsto_right _ _ _ tendsto_const_nhds
    ¬∑ simp_rw [bump]; norm_cast
      exact
        ((tendsto_add_at_top_iff_nat 2).2 (tendsto_const_div_atTop_nhds_0_nat 1)).comp tendsto_snd
    ¬∑ exact eventually_of_forall fun x => (hŒ≥ _).AEStronglyMeasurable
    ¬∑ have := h.tendsto (x, t)
      rw [nhds_prod_eq] at this 
      exact this.comp ((tendsto_fst.comp tendsto_fst).prod_mk tendsto_snd)
  ¬∑ rw [‚Üê zero_smul ‚Ñù (_ : F)]
    have : Continuous fun z => intervalIntegral (Œ≥ z) 0 1 volume :=
      continuous_parametric_intervalIntegral_of_continuous (by apply h) continuous_const
    exact
      (tendsto_one_div_add_at_top_nhds_0_nat.comp tendsto_snd).smul
        ((this.tendsto x).comp tendsto_fst)

end MetricSpace

variable [NormedAddCommGroup E] [NormedSpace ‚Ñù E] [FiniteDimensional ‚Ñù E]

/-- Given a smooth function `g : E ‚Üí F` between normed vector spaces, a smooth surrounding family
is a smooth family of loops `E ‚Üí loop F`, `x ‚Ü¶ Œ≥‚Çì` such that `Œ≥‚Çì` surrounds `g x` for all `x`. -/
@[nolint has_nonempty_instance]
structure SmoothSurroundingFamily (g : E ‚Üí F) where
  smooth_surrounded : ùíû ‚àû g
  toFun : E ‚Üí Loop F
  smooth : ùíû ‚àû ‚Üøto_fun
  Surrounds : ‚àÄ x, (to_fun x).Surrounds <| g x

namespace SmoothSurroundingFamily

variable {g : E ‚Üí F} (Œ≥ : SmoothSurroundingFamily g) (x y : E)

instance : CoeFun (SmoothSurroundingFamily g) fun _ => E ‚Üí Loop F :=
  ‚ü®toFun‚ü©

protected theorem continuous : Continuous (Œ≥ x) :=
  by
  apply continuous_uncurry_left x
  exact Œ≥.smooth.continuous

/-- Given `Œ≥ : smooth_surrounding_family g` and `x : E`, `Œ≥.surrounding_parameters_at x` are the
`t·µ¢ : ‚Ñù`, for `i = 0, 1, ..., dim F` such that `Œ≥ x t·µ¢` surround `g x`. -/
def surroundingParametersAt : Œπ ‚Üí ‚Ñù :=
  Classical.choose (Œ≥.Surrounds x)

/-- Given `Œ≥ : smooth_surrounding_family g` and `x : E`, `Œ≥.surrounding_points_at x` are the
points `Œ≥ x t·µ¢` surrounding `g x` for parameters `t·µ¢ : ‚Ñù`, `i = 0, 1, ..., dim F` (defined
by `Œ≥.surrounding_parameters_at x`). -/
def surroundingPointsAt : Œπ ‚Üí F :=
  Œ≥ x ‚àò Œ≥.surroundingParametersAt x

/-- Given `Œ≥ : smooth_surrounding_family g` and `x : E`, `Œ≥.surrounding_weights_at x` are the
barycentric coordinates of `g x` wrt to the points `Œ≥ x t·µ¢`, for parameters `t·µ¢ : ‚Ñù`,
`i = 0, 1, ..., dim F` (defined by `Œ≥.surrounding_parameters_at x`). -/
def surroundingWeightsAt : Œπ ‚Üí ‚Ñù :=
  Classical.choose (Classical.choose_spec (Œ≥.Surrounds x))

theorem surroundPtsPointsWeightsAt :
    SurroundingPts (g x) (Œ≥.surroundingPointsAt x) (Œ≥.surroundingWeightsAt x) :=
  Classical.choose_spec _

/-- Note that we are mollifying the loop `Œ≥ y` at the surrounding parameters for `Œ≥ x`. -/
def approxSurroundingPointsAt (n : ‚Ñï) (i : Œπ) : F :=
  (Œ≥ y).mollify n (Œ≥.surroundingParametersAt x i)

theorem approxSurroundingPointsAt_smooth (n : ‚Ñï) : ùíû ‚àû fun y => Œ≥.approxSurroundingPointsAt x y n :=
  by
  refine' cont_diff_pi.mpr fun i => _
  suffices ùíû ‚àû fun y => ‚à´ s in 0 ..1, deltaMollifier n (Œ≥.surrounding_parameters_at x i) s ‚Ä¢ Œ≥ y s
    by simpa [approx_surrounding_points_at, Loop.mollify]
  refine' contDiff_parametric_integral_of_contDiff (ContDiff.smul _ Œ≥.smooth) 0 1
  exact delta_mollifier_smooth.snd'

/-- The key property from which it should be easy to construct `local_centering_density`,
`local_centering_density_nhd` etc below. -/
theorem eventually_exists_surroundingPts_approxSurroundingPointsAt :
    ‚àÄ·∂† z : E √ó ‚Ñï in (ùìù x).Prod atTop,
      ‚àÉ w, SurroundingPts (g z.1) (Œ≥.approxSurroundingPointsAt x z.1 z.2) w :=
  by
  let a : Œπ ‚Üí E √ó ‚Ñï ‚Üí F := fun i z => Œ≥.approx_surrounding_points_at x z.1 z.2 i
  suffices ‚àÄ i, tendsto (a i) ((ùìù x).Prod at_top) (ùìù (Œ≥.surrounding_points_at x i))
    by
    have hg : tendsto (fun z : E √ó ‚Ñï => g z.fst) ((ùìù x).Prod at_top) (ùìù (g x)) :=
      tendsto.comp Œ≥.smooth_surrounded.continuous.continuous_at tendsto_fst
    exact
      eventually_surroundingPts_of_tendsto_of_tendsto' ‚ü®_, Œ≥.surround_pts_points_weights_at x‚ü© this
        hg
  intro i
  let t := Œ≥.surrounding_parameters_at x i
  change tendsto (fun z : E √ó ‚Ñï => (Œ≥ z.1).mollify z.2 t) ((ùìù x).Prod at_top) (ùìù (Œ≥ x t))
  exact Loop.tendsto_mollify_apply Œ≥ Œ≥.smooth.continuous x t

/-- This is an auxiliary definition to help construct `centering_density` below.

Given `x : E`, it represents a smooth probability distribution on the circle with the property that:
`‚à´ s in 0..1, Œ≥.local_centering_density x y s ‚Ä¢ Œ≥ y s = g y`
for all `y` in a neighbourhood of `x` (see `local_centering_density_average` below). -/
def localCenteringDensity [DecidablePred (¬∑ ‚àà affineBases Œπ ‚Ñù F)] : E ‚Üí ‚Ñù ‚Üí ‚Ñù := fun y =>
  by
  choose n hn‚ÇÅ hn‚ÇÇ using
    filter.eventually_iff_exists_mem.mp
      (Œ≥.eventually_exists_surrounding_pts_approx_surrounding_points_at x)
  choose u hu v hv huv using mem_prod_iff.mp hn‚ÇÅ
  choose m hmv using mem_at_top_sets.mp hv
  exact
    ‚àë i,
      evalBarycentricCoords Œπ ‚Ñù F (g y) (Œ≥.approx_surrounding_points_at x y m) i ‚Ä¢
        deltaMollifier m (Œ≥.surrounding_parameters_at x i)

/-- This is an auxiliary definition to help construct `centering_density` below. -/
def localCenteringDensityMp : ‚Ñï :=
  by
  choose n hn‚ÇÅ hn‚ÇÇ using
    filter.eventually_iff_exists_mem.mp
      (Œ≥.eventually_exists_surrounding_pts_approx_surrounding_points_at x)
  choose u hu v hv huv using mem_prod_iff.mp hn‚ÇÅ
  choose m hmv using mem_at_top_sets.mp hv
  exact m

theorem localCenteringDensity_spec [DecidablePred (¬∑ ‚àà affineBases Œπ ‚Ñù F)] :
    Œ≥.localCenteringDensity x y =
      ‚àë i,
        evalBarycentricCoords Œπ ‚Ñù F (g y)
            (Œ≥.approxSurroundingPointsAt x y (Œ≥.localCenteringDensityMp x)) i ‚Ä¢
          deltaMollifier (Œ≥.localCenteringDensityMp x) (Œ≥.surroundingParametersAt x i) :=
  rfl

/-- This is an auxiliary definition to help construct `centering_density` below. -/
def localCenteringDensityNhd : Set E :=
  by
  choose n hn‚ÇÅ hn‚ÇÇ using
    filter.eventually_iff_exists_mem.mp
      (Œ≥.eventually_exists_surrounding_pts_approx_surrounding_points_at x)
  choose u hu v hv huv using mem_prod_iff.mp hn‚ÇÅ
  exact interior u

theorem localCenteringDensityNhd_isOpen : IsOpen <| Œ≥.localCenteringDensityNhd x :=
  isOpen_interior

theorem localCenteringDensityNhd_self_mem : x ‚àà Œ≥.localCenteringDensityNhd x :=
  by
  let h :=
    filter.eventually_iff_exists_mem.mp
      (Œ≥.eventually_exists_surrounding_pts_approx_surrounding_points_at x)
  exact
    mem_interior_iff_mem_nhds.mpr
      (Classical.choose
        (Classical.choose_spec (mem_prod_iff.mp (Classical.choose (Classical.choose_spec h)))))

-- unused
theorem localCenteringDensityNhd_covers : univ ‚äÜ ‚ãÉ x, Œ≥.localCenteringDensityNhd x := fun x hx =>
  mem_iUnion.mpr ‚ü®x, Œ≥.localCenteringDensityNhd_self_mem x‚ü©

theorem approxSurroundingPointsAt_of_localCenteringDensityNhd
    (hy : y ‚àà Œ≥.localCenteringDensityNhd x) :
    ‚àÉ w, SurroundingPts (g y) (Œ≥.approxSurroundingPointsAt x y (Œ≥.localCenteringDensityMp x)) w :=
  by
  let h :=
    filter.eventually_iff_exists_mem.mp
      (Œ≥.eventually_exists_surrounding_pts_approx_surrounding_points_at x)
  let nn := Classical.choose h
  let hnn := mem_prod_iff.mp (Classical.choose (Classical.choose_spec h))
  let n := Classical.choose hnn
  let hn := Classical.choose_spec hnn
  change y ‚àà interior n at hy 
  let v := Classical.choose (Classical.choose_spec hn)
  let hv : v ‚àà at_top := Classical.choose (Classical.choose_spec (Classical.choose_spec hn))
  let m := Classical.choose (mem_at_top_sets.mp hv)
  let hm := Classical.choose_spec (mem_at_top_sets.mp hv)
  change ‚àÉ w, SurroundingPts (g y) (Œ≥.approx_surrounding_points_at x y m) w
  suffices (y, m) ‚àà nn by exact Classical.choose_spec (Classical.choose_spec h) _ this
  apply Classical.choose_spec (Classical.choose_spec (Classical.choose_spec hn))
  change y ‚àà n ‚àß m ‚àà v
  exact ‚ü®interior_subset hy, hm _ (le_refl _)‚ü©

theorem approxSurroundingPointsAt_mem_affineBases (hy : y ‚àà Œ≥.localCenteringDensityNhd x) :
    Œ≥.approxSurroundingPointsAt x y (Œ≥.localCenteringDensityMp x) ‚àà affineBases Œπ ‚Ñù F :=
  (Classical.choose_spec
      (Œ≥.approxSurroundingPointsAt_of_localCenteringDensityNhd x y hy)).mem_affineBases

variable [DecidablePred (¬∑ ‚àà affineBases Œπ ‚Ñù F)]

@[simp]
theorem localCenteringDensity_pos (hy : y ‚àà Œ≥.localCenteringDensityNhd x) (t : ‚Ñù) :
    0 < Œ≥.localCenteringDensity x y t :=
  by
  simp only [Œ≥.local_centering_density_spec x, Fintype.sum_apply, Pi.smul_apply,
    Algebra.id.smul_eq_mul]
  refine' Finset.sum_pos (fun i hi => _) Finset.univ_nonempty
  refine' mul_pos _ (deltaMollifier_pos _)
  obtain ‚ü®w, hw‚ü© := Œ≥.approx_surrounding_points_at_of_local_centering_density_nhd x y hy
  convert hw.w_pos i
  rw [‚Üê hw.coord_eq_w]
  simp [evalBarycentricCoords, Œ≥.approx_surrounding_points_at_mem_affine_bases x y hy]

theorem localCenteringDensity_periodic : Periodic (Œ≥.localCenteringDensity x y) 1 :=
  Finset.univ.periodic_sum fun i hi => Periodic.smul deltaMollifier_periodic _

/- ./././Mathport/Syntax/Translate/Expr.lean:177:8: unsupported: ambiguous notation -/
/- ./././Mathport/Syntax/Translate/Expr.lean:177:8: unsupported: ambiguous notation -/
/- ./././Mathport/Syntax/Translate/Expr.lean:177:8: unsupported: ambiguous notation -/
theorem localCenteringDensity_smooth_on :
    smooth_on ‚Üø(Œ≥.localCenteringDensity x) <| Œ≥.localCenteringDensityNhd x √óÀ¢ (univ : Set ‚Ñù) :=
  by
  let h‚ÇÄ (yt : E √ó ‚Ñù) (hyt : yt ‚àà Œ≥.local_centering_density_nhd x √óÀ¢ (univ : Set ‚Ñù)) :=
    congr_fun (Œ≥.local_centering_density_spec x yt.fst) yt.snd
  refine' ContDiffOn.congr _ h‚ÇÄ
  simp only [Fintype.sum_apply, Pi.smul_apply, Algebra.id.smul_eq_mul]
  refine' ContDiffOn.sum fun i hi => ContDiffOn.mul _ (ContDiff.contDiffOn _)
  ¬∑ let w : F √ó (Œπ ‚Üí F) ‚Üí ‚Ñù := fun z => evalBarycentricCoords Œπ ‚Ñù F z.1 z.2 i
    let z : E ‚Üí F √ó (Œπ ‚Üí F) :=
      (Prod.map g fun y => Œ≥.approx_surrounding_points_at x y (Œ≥.local_centering_density_mp x)) ‚àò
        fun x => (x, x)
    change smooth_on ((w ‚àò z) ‚àò Prod.fst) (Œ≥.local_centering_density_nhd x √óÀ¢ univ)
    rw [prod_univ]
    refine' ContDiffOn.comp _ cont_diff_fst.cont_diff_on subset.rfl
    have h‚ÇÅ := smooth_barycentric Œπ ‚Ñù F (Fintype.card_fin _)
    have h‚ÇÇ : ùíû ‚àû (eval i : (Œπ ‚Üí ‚Ñù) ‚Üí ‚Ñù) := contDiff_apply _ _ i
    refine' (h‚ÇÇ.comp_cont_diff_on h‚ÇÅ).comp _ _
    ¬∑ have h‚ÇÉ := (diag_preimage_prod_self (Œ≥.local_centering_density_nhd x)).symm.Subset
      refine' ContDiffOn.comp _ (cont_diff_id.prod contDiff_id).ContDiffOn h‚ÇÉ
      refine' Œ≥.smooth_surrounded.ContDiffOn.Prod_map (ContDiff.contDiffOn _)
      exact Œ≥.approx_surrounding_points_at_smooth x _
    ¬∑ intro y hy
      simp [z, Œ≥.approx_surrounding_points_at_mem_affine_bases x y hy]
  ¬∑ exact delta_mollifier_smooth.comp contDiff_snd

/- ./././Mathport/Syntax/Translate/Expr.lean:177:8: unsupported: ambiguous notation -/
theorem localCenteringDensity_continuous (hy : y ‚àà Œ≥.localCenteringDensityNhd x) :
    Continuous fun t => Œ≥.localCenteringDensity x y t :=
  by
  refine' continuous_iff_continuous_at.mpr fun t => _
  have hyt : Œ≥.local_centering_density_nhd x √óÀ¢ univ ‚àà ùìù (y, t) :=
    mem_nhds_prod_iff'.mpr
      ‚ü®Œ≥.local_centering_density_nhd x, univ, Œ≥.local_centering_density_nhd_is_open x, hy,
        isOpen_univ, mem_univ t, rfl.subset‚ü©
  exact
    ((Œ≥.local_centering_density_smooth_on x).continuousOn.continuousAt hyt).comp
      (Continuous.Prod.mk y).continuousAt

@[simp]
theorem localCenteringDensity_integral_eq_one (hy : y ‚àà Œ≥.localCenteringDensityNhd x) :
    ‚à´ s in 0 ..1, Œ≥.localCenteringDensity x y s = 1 :=
  by
  let n := Œ≥.local_centering_density_mp x
  simp only [Œ≥.local_centering_density_spec x, Prod.forall, exists_prop, gt_iff_lt,
    Fintype.sum_apply, Pi.smul_apply, Algebra.id.smul_eq_mul, Finset.sum_smul]
  rw [intervalIntegral.integral_finset_sum]
  ¬∑ have h : Œ≥.approx_surrounding_points_at x y n ‚àà affineBases Œπ ‚Ñù F :=
      Œ≥.approx_surrounding_points_at_mem_affine_bases x y hy
    simp_rw [‚Üê smul_eq_mul, intervalIntegral.integral_smul, deltaMollifier_integral_eq_one,
      Algebra.id.smul_eq_mul, mul_one, evalBarycentricCoords_apply_of_mem_bases Œπ ‚Ñù F (g y) h,
      AffineBasis.coords_apply, AffineBasis.sum_coord_apply_eq_one]
  ¬∑ simp_rw [‚Üê smul_eq_mul]
    refine' fun i hi => (Continuous.const_smul _ _).IntervalIntegrable 0 1
    exact delta_mollifier_smooth.continuous

@[simp]
theorem localCenteringDensity_average (hy : y ‚àà Œ≥.localCenteringDensityNhd x) :
    ‚à´ s in 0 ..1, Œ≥.localCenteringDensity x y s ‚Ä¢ Œ≥ y s = g y :=
  by
  let n := Œ≥.local_centering_density_mp x
  simp only [Œ≥.local_centering_density_spec x, Prod.forall, exists_prop, gt_iff_lt,
    Fintype.sum_apply, Pi.smul_apply, Algebra.id.smul_eq_mul, Finset.sum_smul]
  rw [intervalIntegral.integral_finset_sum]
  ¬∑ simp_rw [mul_smul, intervalIntegral.integral_smul]
    change ‚àë i, _ ‚Ä¢ Œ≥.approx_surrounding_points_at x y n i = _
    have h : Œ≥.approx_surrounding_points_at x y n ‚àà affineBases Œπ ‚Ñù F :=
      Œ≥.approx_surrounding_points_at_mem_affine_bases x y hy
    erw [evalBarycentricCoords_apply_of_mem_bases Œπ ‚Ñù F (g y) h]
    simp only [AffineBasis.coords_apply]
    exact AffineBasis.linear_combination_coord_eq_self _ _
  ¬∑ simp_rw [mul_smul]
    refine' fun i hi => ((Continuous.smul _ (Œ≥.continuous y)).const_smul _).IntervalIntegrable 0 1
    exact delta_mollifier_smooth.continuous

/-- Given `Œ≥ : smooth_surrounding_family g`, together with a point `x : E` and a map `f : ‚Ñù ‚Üí ‚Ñù`,
`Œ≥.is_centering_density x f` is the proposition that `f` is periodic, strictly positive, and
has integral one and that the average of `Œ≥‚Çì` with respect to the measure that `f` defines on
the circle is `g x`.

The continuity assumption is just a legacy convenience and should be dropped. -/
structure IsCenteringDensity (x : E) (f : ‚Ñù ‚Üí ‚Ñù) : Prop where
  Pos : ‚àÄ t, 0 < f t
  Periodic : Periodic f 1
  integral_one : ‚à´ s in 0 ..1, f s = 1
  average : ‚à´ s in 0 ..1, f s ‚Ä¢ Œ≥ x s = g x
  Continuous : Continuous f

-- Can drop if/when have `interval_integrable.smul_continuous_on`
theorem isCenteringDensity_convex (x : E) : Convex ‚Ñù {f | Œ≥.IsCenteringDensity x f} := by
  classical
  rintro f ‚ü®hf‚ÇÅ, hf‚ÇÇ, hf‚ÇÉ, hf‚ÇÑ, hf‚ÇÖ‚ü© k ‚ü®hk‚ÇÅ, hk‚ÇÇ, hk‚ÇÉ, hk‚ÇÑ, hk‚ÇÖ‚ü© a b ha hb hab
  have hf‚ÇÜ : IntervalIntegrable f volume 0 1 := by apply interval_integrable_of_integral_ne_zero;
    rw [hf‚ÇÉ]; exact one_ne_zero
  have hf‚Çá : IntervalIntegrable (f ‚Ä¢ Œ≥ x) volume 0 1 :=
    (hf‚ÇÖ.smul (Œ≥.continuous x)).IntervalIntegrable 0 1
  have hk‚ÇÜ : IntervalIntegrable k volume 0 1 := by apply interval_integrable_of_integral_ne_zero;
    rw [hk‚ÇÉ]; exact one_ne_zero
  have hk‚Çá : IntervalIntegrable (k ‚Ä¢ Œ≥ x) volume 0 1 :=
    (hk‚ÇÖ.smul (Œ≥.continuous x)).IntervalIntegrable 0 1
  exact
    { Pos := fun t => convex_Ioi (0 : ‚Ñù) (hf‚ÇÅ t) (hk‚ÇÅ t) ha hb hab
      Periodic := (hf‚ÇÇ.smul a).add (hk‚ÇÇ.smul b)
      integral_one := by
        simp_rw [Pi.add_apply]
        rw [intervalIntegral.integral_add (hf‚ÇÜ.smul a) (hk‚ÇÜ.smul b)]
        simp [intervalIntegral.integral_smul, hf‚ÇÉ, hk‚ÇÉ, hab]
      average := by
        simp_rw [Pi.add_apply, Pi.smul_apply, add_smul, smul_assoc]
        erw [intervalIntegral.integral_add (hf‚Çá.smul a) (hk‚Çá.smul b)]
        simp [intervalIntegral.integral_smul, ‚Üê add_smul, hf‚ÇÑ, hk‚ÇÑ, hab]
      Continuous := Continuous.add (hf‚ÇÖ.const_smul a) (hk‚ÇÖ.const_smul b) }

/- ./././Mathport/Syntax/Translate/Expr.lean:177:8: unsupported: ambiguous notation -/
theorem exists_smooth_isCenteringDensity (x : E) :
    ‚àÉ U ‚àà ùìù x,
      ‚àÉ f : E ‚Üí ‚Ñù ‚Üí ‚Ñù,
        smooth_on (uncurry f) (U √óÀ¢ (univ : Set ‚Ñù)) ‚àß ‚àÄ y ‚àà U, Œ≥.IsCenteringDensity y (f y) :=
  ‚ü®Œ≥.localCenteringDensityNhd x,
    mem_nhds_iff.mpr
      ‚ü®_, Subset.rfl, Œ≥.localCenteringDensityNhd_isOpen x, Œ≥.localCenteringDensityNhd_self_mem x‚ü©,
    Œ≥.localCenteringDensity x, Œ≥.localCenteringDensity_smooth_on x, fun y hy =>
    ‚ü®Œ≥.localCenteringDensity_pos x y hy, Œ≥.localCenteringDensity_periodic x y,
      Œ≥.localCenteringDensity_integral_eq_one x y hy, Œ≥.localCenteringDensity_average x y hy,
      Œ≥.localCenteringDensity_continuous x y hy‚ü©‚ü©

/-- This the key construction. It represents a smooth probability distribution on the circle with
the property that:
`‚à´ s in 0..1, Œ≥.centering_density x s ‚Ä¢ Œ≥ x s = g x`
for all `x : E` (see `centering_density_average` below). -/
def centeringDensity : E ‚Üí ‚Ñù ‚Üí ‚Ñù :=
  Classical.choose
    (exists_contDiff_of_convex‚ÇÇ Œ≥.isCenteringDensity_convex Œ≥.exists_smooth_isCenteringDensity)

theorem centeringDensity_smooth : ùíû ‚àû <| uncurry fun x t => Œ≥.centeringDensity x t :=
  (Classical.choose_spec <|
      exists_contDiff_of_convex‚ÇÇ Œ≥.isCenteringDensity_convex Œ≥.exists_smooth_isCenteringDensity).1

theorem isCenteringDensityCenteringDensity (x : E) :
    Œ≥.IsCenteringDensity x (Œ≥.centeringDensity x) :=
  (Classical.choose_spec <|
        exists_contDiff_of_convex‚ÇÇ Œ≥.isCenteringDensity_convex Œ≥.exists_smooth_isCenteringDensity).2
    x

@[simp]
theorem centeringDensity_pos (t : ‚Ñù) : 0 < Œ≥.centeringDensity x t :=
  (Œ≥.isCenteringDensityCenteringDensity x).Pos t

theorem centeringDensity_periodic : Periodic (Œ≥.centeringDensity x) 1 :=
  (Œ≥.isCenteringDensityCenteringDensity x).Periodic

@[simp]
theorem centeringDensity_integral_eq_one : ‚à´ s in 0 ..1, Œ≥.centeringDensity x s = 1 :=
  (Œ≥.isCenteringDensityCenteringDensity x).integral_one

@[simp]
theorem centeringDensity_average : ‚à´ s in 0 ..1, Œ≥.centeringDensity x s ‚Ä¢ Œ≥ x s = g x :=
  (Œ≥.isCenteringDensityCenteringDensity x).average

theorem centeringDensity_continuous : Continuous (Œ≥.centeringDensity x) :=
  by
  apply continuous_uncurry_left x
  exact Œ≥.centering_density_smooth.continuous

theorem centeringDensity_intervalIntegrable (t‚ÇÅ t‚ÇÇ : ‚Ñù) :
    IntervalIntegrable (Œ≥.centeringDensity x) volume t‚ÇÅ t‚ÇÇ :=
  (Œ≥.centeringDensity_continuous x).IntervalIntegrable t‚ÇÅ t‚ÇÇ

@[simp]
theorem integral_add_one_centeringDensity (t : ‚Ñù) :
    ‚à´ s in 0 ..t + 1, Œ≥.centeringDensity x s = (‚à´ s in 0 ..t, Œ≥.centeringDensity x s) + 1 :=
  by
  have h‚ÇÅ := Œ≥.centering_density_interval_integrable x 0 t
  have h‚ÇÇ := Œ≥.centering_density_interval_integrable x t (t + 1)
  simp [‚Üê integral_add_adjacent_intervals h‚ÇÅ h‚ÇÇ,
    (Œ≥.centering_density_periodic x).intervalIntegral_add_eq t 0]

theorem deriv_integral_centeringDensity_pos (t : ‚Ñù) :
    0 < deriv (fun t => ‚à´ s in 0 ..t, Œ≥.centeringDensity x s) t :=
  by
  rw [intervalIntegral.deriv_integral_right (Œ≥.centering_density_interval_integrable _ _ _)
      ((Œ≥.centering_density_continuous x).StronglyMeasurableAtFilter volume (ùìù t))
      (centering_density_continuous Œ≥ x).continuousAt]
  exact centering_density_pos Œ≥ x t

theorem strictMono_integral_centeringDensity :
    StrictMono fun t => ‚à´ s in 0 ..t, Œ≥.centeringDensity x s :=
  strictMono_of_deriv_pos (Œ≥.deriv_integral_centeringDensity_pos x)

theorem surjective_integral_centeringDensity :
    Surjective fun t => ‚à´ s in 0 ..t, Œ≥.centeringDensity x s :=
  haveI : Continuous fun t => ‚à´ s in 0 ..t, Œ≥.centering_density x s :=
    continuous_primitive (Œ≥.centering_density_interval_integrable x) 0
  EquivariantMap.surjective
    ‚ü®fun t => ‚à´ s in 0 ..t, Œ≥.centering_density x s, Œ≥.integral_add_one_centering_density x‚ü© this

/-- Given `Œ≥ : smooth_surrounding_family g`, `x ‚Ü¶ Œ≥.reparametrize x` is a smooth family of
diffeomorphisms of the circle such that reparametrizing `Œ≥‚Çì` by `Œ≥.reparametrize x` gives a loop
with average `g x`.

This is the key construction and the main "output" of the reparametrization lemma. -/
def reparametrize : E ‚Üí EquivariantEquiv := fun x =>
  ({    toFun := fun t => ‚à´ s in 0 ..t, Œ≥.centeringDensity x s
        invFun :=
          (StrictMono.orderIsoOfSurjective _ (Œ≥.strictMono_integral_centeringDensity x)
              (Œ≥.surjective_integral_centeringDensity x)).symm
        left_inv := StrictMono.orderIsoOfSurjective_symm_apply_self _ _ _
        right_inv := fun t => StrictMono.orderIsoOfSurjective_self_symm_apply _ _ _ t
        map_zero' := integral_same
        eqv' := Œ≥.integral_add_one_centeringDensity x } : EquivariantEquiv).symm

-- unused
theorem coe_reparametrize_symm :
    ((Œ≥.reparametrize x).symm : ‚Ñù ‚Üí ‚Ñù) = fun t => ‚à´ s in 0 ..t, Œ≥.centeringDensity x s :=
  rfl

-- unused
theorem reparametrize_symm_apply (t : ‚Ñù) :
    (Œ≥.reparametrize x).symm t = ‚à´ s in 0 ..t, Œ≥.centeringDensity x s :=
  rfl

-- unused
@[simp]
theorem integral_reparametrize (t : ‚Ñù) :
    ‚à´ s in 0 ..Œ≥.reparametrize x t, Œ≥.centeringDensity x s = t := by
  simp [‚Üê reparametrize_symm_apply]

theorem hasDerivAt_reparametrize_symm (s : ‚Ñù) :
    HasDerivAt (Œ≥.reparametrize x).symm (Œ≥.centeringDensity x s) s :=
  integral_hasDerivAt_right (Œ≥.centeringDensity_intervalIntegrable x 0 s)
    ((Œ≥.centeringDensity_continuous x).StronglyMeasurableAtFilter _ _)
    (Œ≥.centeringDensity_continuous x).continuousAt

theorem
  reparametrize_smooth :-- ùíû ‚àû ‚ÜøŒ≥.reparametrize :=
        ùíû
        ‚àû <|
      uncurry fun x t => Œ≥.reparametrize x t :=
  by
  let f : E ‚Üí ‚Ñù ‚Üí ‚Ñù := fun x t => ‚à´ s in 0 ..t, Œ≥.centering_density x s
  change ùíû ‚ä§ fun p : E √ó ‚Ñù => (StrictMono.orderIsoOfSurjective (f p.1) _ _).symm p.2
  apply contDiff_parametric_symm_of_deriv_pos
  ¬∑ exact contDiff_parametric_primitive_of_cont_diff'' Œ≥.centering_density_smooth 0
  ¬∑ exact fun x => deriv_integral_centering_density_pos Œ≥ x

@[simp]
theorem reparametrize_average :
    ((Œ≥ x).reparam <| (Œ≥.reparametrize x).EquivariantMap).average = g x :=
  by
  change ‚à´ s : ‚Ñù in 0 ..1, Œ≥ x (Œ≥.reparametrize x s) = g x
  have h‚ÇÅ :
    ‚àÄ s, s ‚àà uIcc 0 (1 : ‚Ñù) ‚Üí HasDerivAt (Œ≥.reparametrize x).symm (Œ≥.centering_density x s) s :=
    fun s hs => Œ≥.has_deriv_at_reparametrize_symm x s
  have h‚ÇÇ : ContinuousOn (fun s => Œ≥.centering_density x s) (uIcc 0 1) :=
    (Œ≥.centering_density_continuous x).continuousOn
  have h‚ÇÉ : Continuous fun s => Œ≥ x (Œ≥.reparametrize x s) :=
    (Œ≥.continuous x).comp (continuous_uncurry_left x Œ≥.reparametrize_smooth.continuous)
  rw [‚Üê (Œ≥.reparametrize x).symm.map_zero, ‚Üê (Œ≥.reparametrize x).symm.map_one, ‚Üê
    integral_comp_smul_deriv h‚ÇÅ h‚ÇÇ h‚ÇÉ]
  simp

end SmoothSurroundingFamily

