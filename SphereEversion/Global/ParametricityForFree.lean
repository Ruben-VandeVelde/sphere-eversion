import SphereEversion.Global.Relation

noncomputable section

open Set Function

open Filter hiding map_smul

open ChartedSpace SmoothManifoldWithCorners

open LinearMap (ker)

open scoped Topology Manifold Pointwise

section ParameterSpace

/-! ## Fundamental definitions -/


variable {E : Type _} [NormedAddCommGroup E] [NormedSpace ‚Ñù E] {H : Type _} [TopologicalSpace H]
  {I : ModelWithCorners ‚Ñù E H} {M : Type _} [TopologicalSpace M] [ChartedSpace H M]
  [SmoothManifoldWithCorners I M] {E' : Type _} [NormedAddCommGroup E'] [NormedSpace ‚Ñù E']
  {H' : Type _} [TopologicalSpace H'] {I' : ModelWithCorners ‚Ñù E' H'} {M' : Type _}
  [TopologicalSpace M'] [ChartedSpace H' M'] [SmoothManifoldWithCorners I' M'] {EP : Type _}
  [NormedAddCommGroup EP] [NormedSpace ‚Ñù EP] {HP : Type _} [TopologicalSpace HP]
  {IP : ModelWithCorners ‚Ñù EP HP} {P : Type _} [TopologicalSpace P] [ChartedSpace HP P]
  [SmoothManifoldWithCorners IP P] {F : Type _} [NormedAddCommGroup F] [NormedSpace ‚Ñù F]
  {G : Type _} [TopologicalSpace G] {J : ModelWithCorners ‚Ñù F G} {N : Type _} [TopologicalSpace N]
  [ChartedSpace G N] [SmoothManifoldWithCorners J N] {EX : Type _} [NormedAddCommGroup EX]
  [NormedSpace ‚Ñù EX] {HX : Type _} [TopologicalSpace HX] {IX : ModelWithCorners ‚Ñù EX HX}
  -- note: X is a metric space
  {X : Type _}
  [MetricSpace X] [ChartedSpace HX X] [SmoothManifoldWithCorners IX X]

variable {R : RelMfld I M I' M'}

variable (IP P)

/-- The relation `ùì° ^ P` -/
def RelMfld.relativize (R : RelMfld I M I' M') : RelMfld (IP.prod I) (P √ó M) I' M' :=
  bundleSnd ‚Åª¬π' R

variable {IP P}

theorem RelMfld.mem_relativize (R : RelMfld I M I' M')
    (w : OneJetBundle (IP.prod I) (P √ó M) I' M') :
    w ‚àà R.relativize IP P ‚Üî
      (OneJetBundle.mk w.1.1.2 w.1.2 (w.2.comp (ContinuousLinearMap.inr ‚Ñù EP E)) :
          OneJetBundle I M I' M') ‚àà
        R :=
  by simp_rw [RelMfld.relativize, mem_preimage, bundleSnd_eq]; rfl

theorem RelMfld.isOpen_relativize (R : RelMfld I M I' M') (h2 : IsOpen R) :
    IsOpen (R.relativize IP P) :=
  h2.preimage smooth_bundleSnd.continuous

theorem relativize_slice {œÉ : OneJetBundle (IP.prod I) (P √ó M) I' M'}
    {p : DualPair <| TangentSpace (IP.prod I) œÉ.1.1} (q : DualPair <| TangentSpace I œÉ.1.1.2)
    (hpq : p.œÄ.comp (ContinuousLinearMap.inr ‚Ñù EP E) = q.œÄ) :
    (R.relativize IP P).slice œÉ p = œÉ.2 (p.V - (0, q.V)) +·µ• R.slice (bundleSnd œÉ) q :=
  by
  -- for some reason this is needed
  let this.1 :
    Module ‚Ñù
      (((ContMDiffMap.snd : C^‚àû‚üÆ(IP.prod I).prod I', (P √ó M) √ó M'; I', M'‚üØ) *·µñ (TangentSpace I'))
        œÉ.1) :=
    by infer_instance
  have h2pq : ‚àÄ x : E, p.œÄ ((0 : EP), x) = q.œÄ x := fun x =>
    congr_arg (fun f : E ‚ÜíL[‚Ñù] ‚Ñù => f x) hpq
  ext1 w
  have h1 :
    (p.update œÉ.2 w).comp (ContinuousLinearMap.inr ‚Ñù EP E) =
      q.update (bundleSnd œÉ).2 (-œÉ.2 (p.v - (0, q.v)) + w) :=
    by
    ext1 x
    simp_rw [ContinuousLinearMap.comp_apply, ContinuousLinearMap.inr_apply, ‚Üê
      ContinuousLinearMap.map_neg, neg_sub]
    obtain ‚ü®u, hu, t, rfl‚ü© := q.decomp x
    have hv : (0, q.v) - p.v ‚àà ker p.œÄ := by
      rw [LinearMap.mem_ker, map_sub, p.pairing, h2pq, q.pairing, sub_self]
    have hup : ((0 : EP), u) ‚àà ker p.œÄ := (h2pq u).trans hu
    rw [q.update_apply _ hu, ‚Üê Prod.zero_mk_add_zero_mk, map_add, p.update_ker_pi _ _ hup, ‚Üê
      Prod.smul_zero_mk, map_smul]
    nth_rw 1 [‚Üê sub_add_cancel (0, q.v) p.v]
    rw [map_add, p.update_ker_pi _ _ hv, p.update_v, bundleSnd_eq]
    rfl
  have :=
    preimage_vadd_neg (show E' from œÉ.2 (p.v - (0, q.v))) (show Set E' from R.slice (bundleSnd œÉ) q)
  dsimp only at this
  simp_rw [‚Üê this, mem_preimage, mem_slice, R.mem_relativize]
  dsimp only [one_jet_bundle_mk_fst, one_jet_bundle_mk_snd]
  congr

theorem relativize_slice_eq_univ {œÉ : OneJetBundle (IP.prod I) (P √ó M) I' M'}
    {p : DualPair <| TangentSpace (IP.prod I) œÉ.1.1}
    (hp : p.œÄ.comp (ContinuousLinearMap.inr ‚Ñù EP E) = 0) :
    ((R.relativize IP P).slice œÉ p).Nonempty ‚Üî (R.relativize IP P).slice œÉ p = univ :=
  by
  -- for some reason this is needed
  let this.1 :
    Module ‚Ñù
      (((ContMDiffMap.snd : C^‚àû‚üÆ(IP.prod I).prod I', (P √ó M) √ó M'; I', M'‚üØ) *·µñ (TangentSpace I'))
        œÉ.1) :=
    by infer_instance
  have h2p : ‚àÄ x : E, p.œÄ ((0 : EP), x) = 0 := fun x => congr_arg (fun f : E ‚ÜíL[‚Ñù] ‚Ñù => f x) hp
  have :
    ‚àÄ y : E',
      (p.update œÉ.snd y).comp (ContinuousLinearMap.inr ‚Ñù EP E) =
        œÉ.snd.comp (ContinuousLinearMap.inr ‚Ñù EP E) :=
    by
    intro y
    ext1 x
    simp_rw [ContinuousLinearMap.comp_apply, ContinuousLinearMap.inr_apply,
      p.update_ker_pi _ _ (h2p x)]
  simp_rw [Set.Nonempty, eq_univ_iff_forall, mem_slice, R.mem_relativize]
  dsimp only [one_jet_bundle_mk_fst, one_jet_bundle_mk_snd]
  simp_rw [this, exists_const, forall_const]

variable (IP P)

theorem RelMfld.Ample.relativize (hR : R.Ample) : (R.relativize IP P).Ample :=
  by
  intro œÉ p
  let p2 := p.œÄ.comp (ContinuousLinearMap.inr ‚Ñù EP E)
  rcases eq_or_ne p2 0 with (h | h)
  ¬∑ intro w hw
    rw [(relativize_slice_eq_univ h).mp ‚ü®w, hw‚ü©, connectedComponentIn_univ,
      PreconnectedSpace.connectedComponent_eq_univ, convexHull_univ]
  obtain ‚ü®u', hu'‚ü© := ContinuousLinearMap.exists_ne_zero h
  let u := (p2 u')‚Åª¬π ‚Ä¢ u'
  let q : DualPair (TangentSpace I œÉ.1.1.2) :=
    ‚ü®p2, u, by rw [p2.map_smul, smul_eq_mul, inv_mul_cancel hu']‚ü©
  rw [relativize_slice q rfl]
  refine' (hR q).vadd

variable {IP P}

theorem FamilyOneJetSec.uncurry_mem_relativize (S : FamilyOneJetSec I M I' M' IP P) {s : P}
    {x : M} : S.uncurry (s, x) ‚àà R.relativize IP P ‚Üî S s x ‚àà R :=
  by
  simp_rw [RelMfld.relativize, mem_preimage, bundleSnd_eq, OneJetSec.coe_apply, mapLeft]
  congr
  ext v
  simp_rw [S.uncurry_œï', ContinuousLinearMap.comp_apply, ContinuousLinearMap.add_apply,
    ContinuousLinearMap.comp_apply, ContinuousLinearMap.inr_apply, ContinuousLinearMap.coe_fst',
    ContinuousLinearMap.coe_snd', ContinuousLinearMap.map_zero, zero_add, S.coe_œï]

def FamilyFormalSol.uncurry (S : FamilyFormalSol IP P R) : FormalSol (R.relativize IP P) :=
  by
  refine' ‚ü®S.to_family_one_jet_sec.uncurry, _‚ü©
  rintro ‚ü®s, x‚ü©
  exact S.to_family_one_jet_sec.uncurry_mem_relativize.mpr (S.is_sol' s x)

theorem FamilyFormalSol.uncurry_œï' (S : FamilyFormalSol IP P R) (p : P √ó M) :
    S.uncurry.œï p =
      mfderiv IP I' (fun z => S.bs z p.2) p.1 ‚àòL ContinuousLinearMap.fst ‚Ñù EP E +
        S.œï p.1 p.2 ‚àòL ContinuousLinearMap.snd ‚Ñù EP E :=
  S.toFamilyOneJetSec.uncurry_œï' p

def FamilyOneJetSec.curry (S : FamilyOneJetSec (IP.prod I) (P √ó M) I' M' J N) :
    FamilyOneJetSec I M I' M' (J.prod IP) (N √ó P)
    where
  bs p x := (S p.1).bs (p.2, x)
  œï p x := (S p.1).œï (p.2, x) ‚àòL mfderiv I (IP.prod I) (fun x => (p.2, x)) x
  smooth' := by
    rintro ‚ü®‚ü®t, s‚ü©, x‚ü©
    refine' smooth_at_snd.one_jet_bundle_mk (S.smooth_bs.comp smooth_prod_assoc _) _
    have h1 :
      SmoothAt ((J.prod IP).prod I) ùìò(‚Ñù, EP √ó E ‚ÜíL[‚Ñù] E')
        (inTangentCoordinates (IP.prod I) I' (fun p : (N √ó P) √ó M => (p.1.2, p.2))
          (fun p : (N √ó P) √ó M => (S p.1.1).bs (p.1.2, p.2))
          (fun p : (N √ó P) √ó M => (S p.1.1).œï (p.1.2, p.2)) ((t, s), x))
        ((t, s), x) :=
      by
      apply
        (smooth_at_one_jet_bundle.mp <|
              SmoothAt.comp _ (S.smooth (t, (s, x))) (smooth_prod_assoc ((t, s), x))).2.2
    have h2 :
      SmoothAt ((J.prod IP).prod I) ùìò(‚Ñù, E ‚ÜíL[‚Ñù] EP √ó E)
        (inTangentCoordinates I (IP.prod I) Prod.snd (fun p : (N √ó P) √ó M => (p.1.2, p.2))
          (fun p : (N √ó P) √ó M => mfderiv I (IP.prod I) (fun x : M => (p.1.2, x)) p.2) ((t, s), x))
        ((t, s), x) :=
      by
      apply
        ContMDiffAt.mfderiv (fun (p : (N √ó P) √ó M) (x : M) => (p.1.2, x)) Prod.snd
          (smooth_at_fst.fst.snd.prod_mk smoothAt_snd :
            SmoothAt (((J.prod IP).prod I).prod I) (IP.prod I) _ (((t, s), x), x))
          (smoothAt_snd : SmoothAt ((J.prod IP).prod I) _ _ _) le_top
    exact h1.clm_comp_in_tangent_coordinates (continuous_at_fst.snd.prod continuousAt_snd) h2

theorem FamilyOneJetSec.curry_bs (S : FamilyOneJetSec (IP.prod I) (P √ó M) I' M' J N) (p : N √ó P)
    (x : M) : (S.curry p).bs x = (S p.1).bs (p.2, x) :=
  rfl

theorem FamilyOneJetSec.curry_œï (S : FamilyOneJetSec (IP.prod I) (P √ó M) I' M' J N) (p : N √ó P)
    (x : M) : (S.curry p).œï x = (S p.1).œï (p.2, x) ‚àòL mfderiv I (IP.prod I) (fun x => (p.2, x)) x :=
  rfl

theorem FamilyOneJetSec.curry_œï' (S : FamilyOneJetSec (IP.prod I) (P √ó M) I' M' J N) (p : N √ó P)
    (x : M) : (S.curry p).œï x = (S p.1).œï (p.2, x) ‚àòL ContinuousLinearMap.inr ‚Ñù EP E :=
  by
  rw [S.curry_œï]
  congr 1
  refine' ((mdifferentiableAt_const I IP).mfderiv_prod smooth_id.mdifferentiable_at).trans _
  rw [mfderiv_id, mfderiv_const]
  rfl

theorem FormalSol.eq_iff {F‚ÇÅ F‚ÇÇ : FormalSol R} {x : M} :
    F‚ÇÅ x = F‚ÇÇ x ‚Üî F‚ÇÅ.bs x = F‚ÇÇ.bs x ‚àß F‚ÇÅ.œï x = by apply F‚ÇÇ.œï x :=
  by
  simp_rw [Bundle.TotalSpace.ext_iff, FormalSol.fst_eq, heq_iff_eq, Prod.ext_iff, eq_self_iff_true,
    true_and_iff]
  rfl

theorem FamilyOneJetSec.isHolonomicAtCurry (S : FamilyOneJetSec (IP.prod I) (P √ó M) I' M' J N)
    {t : N} {s : P} {x : M} (hS : (S t).IsHolonomicAt (s, x)) : (S.curry (t, s)).IsHolonomicAt x :=
  by
  simp_rw [OneJetSec.IsHolonomicAt, (S.curry _).snd_eq, S.curry_œï] at hS ‚ä¢
  dsimp only
  rw [show (S.curry (t, s)).bs = fun x => (S.curry (t, s)).bs x from rfl, funext (S.curry_bs _)]
  dsimp only
  refine'
    (mfderiv_comp x (S t).smooth_bs.MDifferentiableAt
          ((mdifferentiableAt_const I IP).prod_mk smooth_id.mdifferentiable_at)).trans
      _
  rw [id, hS]
  rfl

theorem FamilyOneJetSec.curry_mem (S : FamilyOneJetSec (IP.prod I) (P √ó M) I' M' J N) {p : N √ó P}
    {x : M} (hR : S p.1 (p.2, x) ‚àà R.relativize IP P) : S.curry p x ‚àà R :=
  by
  simp_rw [RelMfld.relativize, mem_preimage, bundleSnd_eq, OneJetSec.coe_apply, mapLeft] at hR ‚ä¢
  convert hR
  ext v
  simp_rw [S.curry_œï']

def FamilyFormalSol.curry (S : FamilyFormalSol J N (R.relativize IP P)) :
    FamilyFormalSol (J.prod IP) (N √ó P) R :=
  ‚ü®S.toFamilyOneJetSec.curry, fun p x => S.toFamilyOneJetSec.curry_mem S.is_sol‚ü©

theorem FamilyFormalSol.curry_œï' (S : FamilyFormalSol J N (R.relativize IP P)) (p : N √ó P) (x : M) :
    (S.curry p).œï x = (S p.1).œï (p.2, x) ‚àòL ContinuousLinearMap.inr ‚Ñù EP E :=
  S.toFamilyOneJetSec.curry_œï' p x

theorem curry_eq_iff_eq_uncurry {ùìï : FamilyFormalSol J N (R.relativize IP P)}
    {ùìï‚ÇÄ : FamilyFormalSol IP P R} {t : N} {x : M} {s : P} (h : ùìï t (s, x) = ùìï‚ÇÄ.uncurry (s, x)) :
    (ùìï.curry (t, s)) x = ùìï‚ÇÄ s x :=
  by
  simp_rw [FormalSol.eq_iff] at h ‚ä¢
  refine' ‚ü®h.1, _‚ü©
  simp_rw [ùìï.curry_œï', h.2, ùìï‚ÇÄ.uncurry_œï']
  ext v
  simp_rw [ContinuousLinearMap.comp_apply, ContinuousLinearMap.add_apply,
    ContinuousLinearMap.comp_apply, ContinuousLinearMap.inr_apply, ContinuousLinearMap.coe_fst',
    ContinuousLinearMap.coe_snd', ContinuousLinearMap.map_zero, zero_add]
  rfl

theorem RelMfld.SatisfiesHPrinciple.satisfiesHPrincipleWith (R : RelMfld I M IX X) {C : Set (P √ó M)}
    (Œµ : M ‚Üí ‚Ñù) (h : (R.relativize IP P).SatisfiesHPrinciple C fun x => Œµ x.2) :
    R.SatisfiesHPrincipleWith IP C Œµ := by
  intro ùìï‚ÇÄ hùìï‚ÇÄ
  obtain ‚ü®ùìï, h1ùìï, h2ùìï, h3ùìï, h4ùìï‚ü© :=
    h ùìï‚ÇÄ.uncurry (hùìï‚ÇÄ.mono fun p hp => ùìï‚ÇÄ.to_family_one_jet_sec.is_holonomic_uncurry.mpr hp)
  refine' ‚ü®ùìï.curry, _, _, _, _‚ü©
  ¬∑ intro s x; exact curry_eq_iff_eq_uncurry (h1ùìï (s, x))
  ¬∑ intro s x; exact ùìï.to_family_one_jet_sec.is_holonomic_at_curry (h2ùìï (s, x))
  ¬∑ refine' h3ùìï.mono _; rintro ‚ü®s, x‚ü© hp t; exact curry_eq_iff_eq_uncurry (hp t)
  ¬∑ intro t s x; exact h4ùìï t (s, x)

end ParameterSpace

