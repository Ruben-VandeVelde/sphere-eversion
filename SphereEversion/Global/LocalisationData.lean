import Mathlib.Geometry.Manifold.Algebra.SmoothFunctions
import Mathlib.Geometry.Manifold.Instances.Real
import Mathlib.Topology.MetricSpace.PartitionOfUnity
import SphereEversion.Global.SmoothEmbedding

noncomputable section

open scoped Manifold

open Set Metric

section

variable {ùïú : Type _} [NontriviallyNormedField ùïú] {E : Type _} [NormedAddCommGroup E]
  [NormedSpace ùïú E] {H : Type _} [TopologicalSpace H] (I : ModelWithCorners ùïú E H) {M : Type _}
  [TopologicalSpace M] [ChartedSpace H M] [SmoothManifoldWithCorners I M] {E' : Type _}
  [NormedAddCommGroup E'] [NormedSpace ùïú E'] {H' : Type _} [TopologicalSpace H']
  (I' : ModelWithCorners ùïú E' H') {M' : Type _} [TopologicalSpace M'] [ChartedSpace H' M']
  [SmoothManifoldWithCorners I' M']

/-- Definition `def:localisation_data`. -/
structure LocalisationData (f : M ‚Üí M') where
  cont : Continuous f
  Œπ' : Type _
  N : ‚Ñï
  œÜ : IndexType N ‚Üí OpenSmoothEmbedding ùìò(ùïú, E) E I M
  œà : Œπ' ‚Üí OpenSmoothEmbedding ùìò(ùïú, E') E' I' M'
  j : IndexType N ‚Üí Œπ'
  h‚ÇÅ : (‚ãÉ i, œÜ i '' ball (0 : E) 1) = univ
  h‚ÇÇ : (‚ãÉ i', œà i' '' ball (0 : E') 1) = univ
  h‚ÇÉ : ‚àÄ i, range (f ‚àò œÜ i) ‚äÜ œà (j i) '' ball (0 : E') 1
  h‚ÇÑ : LocallyFinite fun i' => range (œà i')
  lf_œÜ : LocallyFinite fun i => range (œÜ i)

namespace LocalisationData

variable {f : M ‚Üí M'} {I I'} (ld : LocalisationData I I' f)

abbrev œàj :=
  ld.œà ‚àò ld.j

/-- The type indexing the source charts of the given localisation data. -/
def Œπ (L : LocalisationData I I' f) :=
  IndexType L.N

theorem iUnion_succ' {Œ≤ : Type _} (s : ld.Œπ ‚Üí Set Œ≤) (i : IndexType ld.N) :
    (‚ãÉ j ‚â§ i, s j) = (‚ãÉ j < i, s j) ‚à™ s i :=
  by
  simp only [(fun j => le_iff_lt_or_eq : ‚àÄ j, j ‚â§ i ‚Üî j < i ‚à® j = i)]
  erw [bUnion_union, bUnion_singleton]
  rfl

open Filter

end LocalisationData

end

section

open ModelWithCorners

variable {E : Type _} [NormedAddCommGroup E] [NormedSpace ‚Ñù E] [FiniteDimensional ‚Ñù E] {M : Type _}
  [TopologicalSpace M] [SigmaCompactSpace M] [LocallyCompactSpace M] [T2Space M] {H : Type _}
  [TopologicalSpace H] (I : ModelWithCorners ‚Ñù E H) [Boundaryless I] [Nonempty M] [ChartedSpace H M]
  [SmoothManifoldWithCorners I M] (E' : Type _) [NormedAddCommGroup E'] [NormedSpace ‚Ñù E']
  [FiniteDimensional ‚Ñù E'] {H' : Type _} [TopologicalSpace H'] (I' : ModelWithCorners ‚Ñù E' H')
  [Boundaryless I'] {M' : Type _} [MetricSpace M'] [SigmaCompactSpace M'] [LocallyCompactSpace M']
  [Nonempty M'] [ChartedSpace H' M'] [SmoothManifoldWithCorners I' M']

variable (M')

theorem nice_atlas_target :
    ‚àÉ n,
      ‚àÉ œà : IndexType n ‚Üí OpenSmoothEmbedding ùìò(‚Ñù, E') E' I' M',
        (LocallyFinite fun i' => range (œà i')) ‚àß (‚ãÉ i', œà i' '' ball 0 1) = univ :=
  let h := nice_atlas E' I' (fun j : PUnit => @isOpen_univ M' _) (by simp [eq_univ_iff_forall])
  ‚ü®h.some, h.choose_spec.some, h.choose_spec.choose_spec.2‚ü©

/-- A collection of charts on a manifold `M'` which are smooth open embeddings with domain the whole
model space, and which cover the manifold when restricted in each case to the unit ball. -/
def targetCharts (i' : IndexType (nice_atlas_target E' I' M').some) :
    OpenSmoothEmbedding ùìò(‚Ñù, E') E' I' M' :=
  (nice_atlas_target E' I' M').choose_spec.some i'

theorem targetCharts_cover : (‚ãÉ i', targetCharts E' I' M' i' '' ball (0 : E') 1) = univ :=
  (nice_atlas_target E' I' M').choose_spec.choose_spec.2

variable (E) {M'} {f : M ‚Üí M'} (hf : Continuous f)

theorem nice_atlas_domain :
    ‚àÉ n,
      ‚àÉ œÜ : IndexType n ‚Üí OpenSmoothEmbedding ùìò(‚Ñù, E) E I M,
        (‚àÄ i, ‚àÉ i', range (œÜ i) ‚äÜ f ‚Åª¬π' (‚áë(targetCharts E' I' M' i') '' ball (0 : E') 1)) ‚àß
          (LocallyFinite fun i => range (œÜ i)) ‚àß (‚ãÉ i, œÜ i '' ball 0 1) = univ :=
  nice_atlas E I
    (fun i' => ((targetCharts E' I' M' i').open_map (ball 0 1) isOpen_ball).preimage hf)
    (by rw [‚Üê preimage_Union, targetCharts_cover, preimage_univ])

/-- Lemma `lem:ex_localisation`
  Any continuous map between manifolds has some localisation data. -/
def stdLocalisationData : LocalisationData I I' f
    where
  cont := hf
  N := (nice_atlas_domain E I E' I' hf).some
  Œπ' := IndexType (nice_atlas_target E' I' M').some
  œÜ := (nice_atlas_domain E I E' I' hf).choose_spec.some
  œà := targetCharts E' I' M'
  j i := ((nice_atlas_domain E I E' I' hf).choose_spec.choose_spec.1 i).some
  h‚ÇÅ := (nice_atlas_domain E I E' I' hf).choose_spec.choose_spec.2.2
  h‚ÇÇ := targetCharts_cover E' I' M'
  h‚ÇÉ i := by
    rw [range_comp]
    rintro - ‚ü®y, hy, rfl‚ü©
    exact ((nice_atlas_domain E I E' I' hf).choose_spec.choose_spec.1 i).choose_spec hy
  h‚ÇÑ := (nice_atlas_target E' I' M').choose_spec.choose_spec.1
  lf_œÜ := (nice_atlas_domain E I E' I' hf).choose_spec.choose_spec.2.1

variable {E E' I I'}

/-- Lemma `lem:localisation_stability`. -/
theorem localisation_stability {f : M ‚Üí M'} (ld : LocalisationData I I' f) :
    ‚àÉ (Œµ : M ‚Üí ‚Ñù) (hŒµ : ‚àÄ m, 0 < Œµ m) (hŒµ' : Continuous Œµ),
      ‚àÄ (g : M ‚Üí M') (hg : ‚àÄ m, dist (g m) (f m) < Œµ m) (i), range (g ‚àò ld.œÜ i) ‚äÜ range (ld.œàj i) :=
  by
  let K : ld.Œπ' ‚Üí Set M' := fun i => ld.œà i '' closed_ball 0 1
  let U : ld.Œπ' ‚Üí Set M' := fun i => range <| ld.œà i
  have hK : ‚àÄ i, IsClosed (K i) := fun i =>
    IsCompact.isClosed (IsCompact.image (is_compact_closed_ball 0 1) (ld.œà i).continuous)
  have hK' : LocallyFinite K := ld.h‚ÇÑ.subset fun i => image_subset_range (ld.œà i) (closed_ball 0 1)
  have hU : ‚àÄ i, IsOpen (U i) := fun i => (ld.œà i).isOpen_range
  have hKU : ‚àÄ i, K i ‚äÜ U i := fun i => image_subset_range _ _
  obtain ‚ü®Œ¥, hŒ¥‚ÇÄ, hŒ¥‚ÇÅ‚ü© := exists_continuous_real_forall_closed_ball_subset hK hU hKU hK'
  have := ld.cont
  refine' ‚ü®Œ¥ ‚àò f, fun m => hŒ¥‚ÇÄ (f m), by continuity, fun g hg i => _‚ü©
  rintro - ‚ü®e, rfl‚ü©
  have hi : f (ld.œÜ i e) ‚àà K (ld.j i) :=
    image_subset _ ball_subset_closed_ball (ld.h‚ÇÉ i (mem_range_self e))
  exact hŒ¥‚ÇÅ (ld.j i) (f <| ld.œÜ i e) hi (le_of_lt (hg _))

namespace LocalisationData

protected def Œµ (ld : LocalisationData I I' f) : M ‚Üí ‚Ñù :=
  (localisation_stability ld).some

theorem Œµ_pos (ld : LocalisationData I I' f) : ‚àÄ m, 0 < ld.Œµ m :=
  (localisation_stability ld).choose_spec.some

theorem Œµ_cont (ld : LocalisationData I I' f) : Continuous ld.Œµ :=
  (localisation_stability ld).choose_spec.choose_spec.some

theorem Œµ_spec (ld : LocalisationData I I' f) :
    ‚àÄ (g : M ‚Üí M') (hg : ‚àÄ m, dist (g m) (f m) < ld.Œµ m) (i : ld.Œπ),
      range (g ‚àò ld.œÜ i) ‚äÜ range (ld.œàj i) :=
  (localisation_stability ld).choose_spec.choose_spec.choose_spec

end LocalisationData

end

